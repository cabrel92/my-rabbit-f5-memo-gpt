2. Red√©marrer le cluster
   ```bash
   # D√©marrer serveur1 (master)
   ssh serveur1 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur2
   ssh serveur2 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur3
   ssh serveur3 "systemctl start rabbitmq-server"
   ```

3. V√©rifier la formation du cluster
   ```bash
   rabbitmqctl cluster_status
   ```

4. Notifier les √©quipes
   - Email urgent aux d√©veloppeurs
   - Mise √† jour status page

**Temps de r√©solution cible :** 15 minutes

---

### Incident Niveau 2 : MAJEUR (Performance D√©grad√©e)

**Sympt√¥mes :**
- Ralentissement des applications
- Files d'attente satur√©es
- Alarmes m√©moire

**Actions :**
1. Identifier la cause
   ```bash
   rabbitmqctl list_alarms
   rabbitmqctl list_queues name messages
   ```

2. Si alarme m√©moire :
   ```bash
   # Purger les queues non-critiques
   rabbitmqctl purge_queue nom-queue-non-critique
   
   # Force garbage collection
   rabbitmqctl eval 'garbage_collect().'
   ```

3. Si files satur√©es :
   -# Guide RabbitMQ Cluster Hautement Disponible avec S√©curit√© TLS

## Vue d'Ensemble Ex√©cutive

Ce document d√©crit la mise en place d'un syst√®me de messagerie RabbitMQ **s√©curis√©** et **hautement disponible** pour l'entreprise. La solution garantit :

- ‚úÖ **S√©curit√© maximale** : Toutes les communications sont chiffr√©es (TLS/SSL)
- ‚úÖ **Haute disponibilit√©** : Le syst√®me continue de fonctionner m√™me si un serveur tombe
- ‚úÖ **Conformit√©** : Respect des standards de s√©curit√© informatique

### Qu'est-ce que TLS/SSL ?

**TLS (Transport Layer Security)** est comme un tunnel s√©curis√© pour les donn√©es. Imaginez :
- üîí Une conversation t√©l√©phonique chiffr√©e que personne ne peut √©couter
- üÜî Des papiers d'identit√© num√©riques (certificats) pour v√©rifier l'identit√© de chacun
- üõ°Ô∏è Une protection contre les pirates informatiques

---

## Architecture Simplifi√©e

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ     APPLICATIONS (Python, Java, etc)    ‚îÇ
‚îÇ         avec certificats clients        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ Connexions TLS chiffr√©es
               ‚îÇ
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                     ‚îÇ              ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇServeur1‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇServeur2 ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇServeur3 ‚îÇ
‚îÇRabbitMQ‚îÇ   TLS    ‚îÇRabbitMQ ‚îÇTLS ‚îÇRabbitMQ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    Communications inter-serveurs chiffr√©es
```

**3 serveurs RabbitMQ** travaillent ensemble :
- Si un serveur tombe, les 2 autres continuent
- Les donn√©es sont r√©pliqu√©es automatiquement
- Toutes les communications sont chiffr√©es

---

## Partie 1 : Cr√©ation des Certificats de S√©curit√©

### Comprendre les Certificats

Pensez aux certificats comme des **cartes d'identit√© num√©riques** :

1. **Autorit√© de Certification (CA)** = Le gouvernement qui √©met les cartes d'identit√©
2. **Certificat Serveur** = Carte d'identit√© de chaque serveur RabbitMQ
3. **Certificat Client** = Carte d'identit√© de chaque application

### √âtape 1 : Cr√©er l'Autorit√© de Certification (CA)

**Pourquoi ?** C'est l'autorit√© qui va "signer" tous les autres certificats pour garantir leur authenticit√©.

```bash
# Cr√©er le dossier pour stocker les certificats
mkdir -p /opt/rabbitmq-securite/autorite-certification
cd /opt/rabbitmq-securite/autorite-certification

# Cr√©er la cl√© priv√©e de l'autorit√© (mot de passe requis)
openssl genrsa -aes256 -out cle-ca.pem 4096

# Cr√©er le certificat de l'autorit√© (valable 10 ans)
openssl req -new -x509 -days 3650 -key cle-ca.pem -out certificat-ca.pem \
  -subj "/C=FR/ST=Ile-de-France/L=Paris/O=VotreEntreprise/CN=Autorite RabbitMQ"
```

**‚ö†Ô∏è IMPORTANT** : Sauvegardez `cle-ca.pem` dans un coffre-fort s√©curis√©. C'est la cl√© ma√Ætresse !

---

### √âtape 2 : Cr√©er les Certificats pour les Serveurs RabbitMQ

**Pourquoi ?** Chaque serveur a besoin de prouver son identit√©.

```bash
# Cr√©er le dossier pour les certificats serveurs
mkdir -p /opt/rabbitmq-securite/serveurs
cd /opt/rabbitmq-securite/serveurs

# Pour chaque serveur (r√©p√©ter pour serveur1, serveur2, serveur3)
SERVEUR="serveur1"

# 1. Cr√©er la cl√© priv√©e du serveur
openssl genrsa -out ${SERVEUR}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${SERVEUR}-cle.pem -out ${SERVEUR}-demande.csr \
  -subj "/C=FR/ST=Ile-de-France/O=VotreEntreprise/CN=rabbitmq-${SERVEUR}.entreprise.local"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${SERVEUR}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${SERVEUR}-certificat.pem \
  -days 730 -sha384

# 4. Cr√©er le "bundle" (certificat + autorit√© CA)
cat ${SERVEUR}-certificat.pem ../autorite-certification/certificat-ca.pem > \
    ${SERVEUR}-bundle.pem
```

**R√©p√©tez cette op√©ration pour serveur2 et serveur3.**

---

### √âtape 3 : Cr√©er les Certificats pour les Applications Clientes

**Pourquoi ?** Pour que seules les applications autoris√©es puissent se connecter.

```bash
# Cr√©er le dossier pour les certificats clients
mkdir -p /opt/rabbitmq-securite/clients
cd /opt/rabbitmq-securite/clients

# Pour chaque application (exemple: app-production)
APPLICATION="app-production"

# 1. Cr√©er la cl√© priv√©e du client
openssl genrsa -out ${APPLICATION}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${APPLICATION}-cle.pem -out ${APPLICATION}-demande.csr \
  -subj "/C=FR/O=VotreEntreprise/CN=${APPLICATION}"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${APPLICATION}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${APPLICATION}-certificat.pem \
  -days 365 -sha384
```

**R√©sum√© des fichiers cr√©√©s :**
- `certificat-ca.pem` : L'autorit√© de certification (√† distribuer partout)
- `serveurX-bundle.pem` : Certificat de chaque serveur
- `serveurX-cle.pem` : Cl√© priv√©e de chaque serveur (SECRET)
- `app-production-certificat.pem` : Certificat de l'application
- `app-production-cle.pem` : Cl√© priv√©e de l'application (SECRET)

---

## Partie 2 : Configuration TLS des Serveurs RabbitMQ

### √âtape 1 : Installer les Certificats sur Chaque Serveur

```bash
# Sur chaque serveur (serveur1, serveur2, serveur3)
# Se connecter en SSH au serveur

# Cr√©er le dossier s√©curis√©
sudo mkdir -p /etc/rabbitmq/certificats
sudo chown rabbitmq:rabbitmq /etc/rabbitmq/certificats
sudo chmod 700 /etc/rabbitmq/certificats

# Copier les fichiers depuis votre poste
# (Adapter "serveur1" selon le serveur)
scp certificat-ca.pem serveur1:/etc/rabbitmq/certificats/ca.pem
scp serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem
scp serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem

# S√©curiser les permissions
sudo chmod 600 /etc/rabbitmq/certificats/serveur-cle.pem
sudo chmod 644 /etc/rabbitmq/certificats/serveur.pem
sudo chmod 644 /etc/rabbitmq/certificats/ca.pem
```

---

### √âtape 2 : Configuration TLS pour les Connexions Clients

**Fichier : `/etc/rabbitmq/rabbitmq.conf`**

```conf
# ============================================================================
# CONFIGURATION TLS RABBITMQ - CONNEXIONS CLIENTS
# ============================================================================

# D√©sactiver les connexions non-s√©curis√©es (sans TLS)
listeners.tcp = none

# Activer uniquement les connexions TLS s√©curis√©es
listeners.ssl.default = 5671

# --- CHEMINS DES CERTIFICATS ---
# Certificat de l'autorit√© (CA) pour v√©rifier les clients
ssl_options.cacertfile = /etc/rabbitmq/certificats/ca.pem

# Certificat de ce serveur
ssl_options.certfile = /etc/rabbitmq/certificats/serveur.pem

# Cl√© priv√©e de ce serveur (SECRET)
ssl_options.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- S√âCURIT√â RENFORC√âE ---
# V√©rifier OBLIGATOIREMENT l'identit√© du client
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true

# Profondeur de v√©rification de la cha√Æne de certificats
ssl_options.depth = 2

# --- PROTOCOLES TLS AUTORIS√âS ---
# Utiliser uniquement TLS 1.2 et TLS 1.3 (les plus s√©curis√©s)
ssl_options.versions.1 = tlsv1.3
ssl_options.versions.2 = tlsv1.2

# --- ALGORITHMES DE CHIFFREMENT ---
# Utiliser uniquement les algorithmes modernes et s√©curis√©s
ssl_options.ciphers.1 = TLS_AES_256_GCM_SHA384
ssl_options.ciphers.2 = TLS_AES_128_GCM_SHA256
ssl_options.ciphers.3 = ECDHE-RSA-AES256-GCM-SHA384
ssl_options.ciphers.4 = ECDHE-RSA-AES128-GCM-SHA256

# Pr√©f√©rer l'ordre des algorithmes du serveur
ssl_options.honor_cipher_order = true

# --- INTERFACE D'ADMINISTRATION (HTTPS) ---
# D√©sactiver HTTP non-s√©curis√©
management.tcp.port = none

# Activer HTTPS pour l'administration
management.ssl.port = 15671
management.ssl.cacertfile = /etc/rabbitmq/certificats/ca.pem
management.ssl.certfile = /etc/rabbitmq/certificats/serveur.pem
management.ssl.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- CONFIGURATION CLUSTER ---
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-serveur1
cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-serveur2
cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-serveur3

# Heartbeat entre les n≈ìuds (10 secondes)
cluster_keepalive_interval = 10000

# --- HAUTE DISPONIBILIT√â ---
# Les files d'attente "quorum" sont r√©pliqu√©es sur les 3 serveurs
# M√©moire et disque
vm_memory_high_watermark.relative = 0.6
disk_free_limit.absolute = 5GB

# Timeout des connexions
heartbeat = 60
```

**üí° Explication simplifi√©e :**
- ‚úÖ Seules les connexions chiffr√©es TLS sont accept√©es
- ‚úÖ Les clients DOIVENT pr√©senter un certificat valide
- ‚úÖ Les protocoles anciens et non-s√©curis√©s sont d√©sactiv√©s
- ‚úÖ L'interface web d'administration est aussi s√©curis√©e (HTTPS)

---

### √âtape 3 : Configuration TLS pour les Communications Entre Serveurs

**Pourquoi ?** Les 3 serveurs RabbitMQ doivent aussi communiquer de fa√ßon s√©curis√©e entre eux.

**Fichier : `/etc/rabbitmq/inter-serveurs-tls.config`**

```erlang
%% ============================================================================
%% CONFIGURATION TLS POUR COMMUNICATIONS INTER-SERVEURS
%% ============================================================================

[
  {kernel, [
    {inet_dist_use_interface, {0,0,0,0}},
    {inet_dist_listen_min, 25672},
    {inet_dist_listen_max, 25672}
  ]},
  
  {rabbit, [
    {ssl_dist_opt, [
      %% Configuration SERVEUR (pour recevoir les connexions)
      {server, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        %% V√©rifier l'identit√© de l'autre serveur
        {verify, verify_peer},
        {fail_if_no_peer_cert, true},
        
        %% Utiliser TLS 1.2 et 1.3
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        %% Algorithmes de chiffrement s√©curis√©s
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384",
          "ECDHE-RSA-AES128-GCM-SHA256"
        ]}
      ]},
      
      %% Configuration CLIENT (pour initier les connexions)
      {client, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        {verify, verify_peer},
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384"
        ]}
      ]}
    ]}
  ]}
].
```

**üí° Point cl√© :** Cette configuration active TLS pour les communications "cach√©es" entre serveurs (le c≈ìur du cluster).

---

### √âtape 4 : Configuration Environnement Erlang

**Fichier : `/etc/rabbitmq/rabbitmq-env.conf`**

```bash
# ============================================================================
# CONFIGURATION ENVIRONNEMENT RABBITMQ
# ============================================================================

# Nom du n≈ìud (ADAPTER selon le serveur: serveur1, serveur2, serveur3)
NODENAME=rabbit@rabbitmq-serveur1

# Cookie partag√© entre TOUS les serveurs (doit √™tre identique)
# G√©n√©rer avec: openssl rand -base64 32
HOME=/var/lib/rabbitmq

# ACTIVER TLS pour les communications inter-serveurs
SERVER_ADDITIONAL_ERL_ARGS="-proto_dist inet_tls -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config"
```

**‚ö†Ô∏è CRITIQUE** : Le cookie Erlang doit √™tre **identique** sur les 3 serveurs !

```bash
# Sur TOUS les serveurs, cr√©er le m√™me cookie
echo "VOTRE_COOKIE_SECRET_ICI" > /var/lib/rabbitmq/.erlang.cookie
chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
chmod 400 /var/lib/rabbitmq/.erlang.cookie
```

---

### √âtape 5 : Configuration du Pare-feu

**Pourquoi ?** Autoriser uniquement les ports n√©cessaires et s√©curis√©s.

```bash
# Sur chaque serveur

# Ports √† ouvrir:
# - 5671 : Connexions clients TLS
# - 15671 : Interface web HTTPS
# - 25672 : Communication inter-serveurs TLS
# - 4369 : Service Erlang (epmd)

firewall-cmd --permanent --add-port=5671/tcp   # AMQP TLS
firewall-cmd --permanent --add-port=15671/tcp  # Management HTTPS
firewall-cmd --permanent --add-port=25672/tcp  # Cluster TLS
firewall-cmd --permanent --add-port=4369/tcp   # Erlang
firewall-cmd --reload
```

---

## Partie 3 : Formation du Cluster

### √âtape 1 : D√©marrer le Premier Serveur

```bash
# Sur serveur1
systemctl start rabbitmq-server
systemctl enable rabbitmq-server

# Activer le plugin d'administration web
rabbitmq-plugins enable rabbitmq_management

# Cr√©er un utilisateur administrateur
rabbitmqctl add_user admin MotDePasseSecurise123!
rabbitmqctl set_user_tags admin administrator
rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"

# V√©rifier que TLS fonctionne
rabbitmq-diagnostics listeners
# Vous devez voir: Port 5671 (ssl)
```

---

### √âtape 2 : Ajouter les Autres Serveurs au Cluster

```bash
# Sur serveur2
systemctl start rabbitmq-server

# Arr√™ter l'application RabbitMQ (pas le syst√®me)
rabbitmqctl stop_app

# Rejoindre le cluster
rabbitmqctl join_cluster rabbit@rabbitmq-serveur1

# Red√©marrer l'application
rabbitmqctl start_app

# V√©rifier
rabbitmqctl cluster_status
```

**R√©p√©ter sur serveur3.**

---

### √âtape 3 : Configurer la Haute Disponibilit√©

```bash
# Sur n'importe quel serveur du cluster
# Cr√©er une politique pour que les files soient r√©pliqu√©es sur les 3 serveurs

rabbitmqctl set_policy ha-all ".*" \
  '{"ha-mode":"all","ha-sync-mode":"automatic"}' \
  --priority 1 \
  --apply-to queues
```

**üí° R√©sultat :** Toutes les files d'attente seront automatiquement r√©pliqu√©es sur les 3 serveurs.

---

## Partie 4 : Tester la Connexion S√©curis√©e

### Test 1 : V√©rifier les Certificats

```bash
# Tester la connexion TLS au serveur
openssl s_client -connect rabbitmq-serveur1.entreprise.local:5671 \
  -cert /opt/rabbitmq-securite/clients/app-production-certificat.pem \
  -key /opt/rabbitmq-securite/clients/app-production-cle.pem \
  -CAfile /opt/rabbitmq-securite/autorite-certification/certificat-ca.pem

# Si succ√®s, vous verrez:
# Verify return code: 0 (ok)
```

---

### Test 2 : Connexion depuis Python

**Installation de la biblioth√®que Python :**

```bash
pip install pika
```

**Code Python de test :**

```python
import pika
import ssl

# ============================================================================
# CONFIGURATION TLS POUR PYTHON
# ============================================================================

# 1. Cr√©er le contexte SSL/TLS
contexte_ssl = ssl.create_default_context(
    cafile="/chemin/vers/certificat-ca.pem"
)

# 2. Charger le certificat et la cl√© de l'application
contexte_ssl.load_cert_chain(
    certfile="/chemin/vers/app-production-certificat.pem",
    keyfile="/chemin/vers/app-production-cle.pem"
)

# 3. V√©rifier le nom du serveur
contexte_ssl.check_hostname = True
contexte_ssl.verify_mode = ssl.CERT_REQUIRED

# 4. Configurer la connexion RabbitMQ
identifiants = pika.PlainCredentials('admin', 'MotDePasseSecurise123!')

parametres = pika.ConnectionParameters(
    host='rabbitmq-serveur1.entreprise.local',
    port=5671,
    virtual_host='/',
    credentials=identifiants,
    ssl_options=pika.SSLOptions(contexte_ssl),
    heartbeat=60,
    blocked_connection_timeout=300
)

# 5. Se connecter
try:
    connexion = pika.BlockingConnection(parametres)
    canal = connexion.channel()
    
    print("‚úÖ Connexion TLS r√©ussie !")
    
    # 6. Cr√©er une file d'attente
    canal.queue_declare(
        queue='test-securise',
        durable=True
    )
    
    # 7. Envoyer un message
    canal.basic_publish(
        exchange='',
        routing_key='test-securise',
        body='Message de test s√©curis√©',
        properties=pika.BasicProperties(
            delivery_mode=2,  # Message persistant
        )
    )
    
    print("‚úÖ Message envoy√© avec succ√®s !")
    
    connexion.close()
    
except Exception as e:
    print(f"‚ùå Erreur de connexion : {e}")
```

---

## Partie 5 : Surveillance et Maintenance

### Acc√©der √† l'Interface Web (HTTPS)

Ouvrez votre navigateur :
```
https://rabbitmq-serveur1.entreprise.local:15671
```

**‚ö†Ô∏è Note :** Votre navigateur affichera un avertissement car le certificat est auto-sign√©. C'est normal. Ajoutez une exception de s√©curit√©.

Connectez-vous avec l'utilisateur `admin` cr√©√© pr√©c√©demment.

---

### Commandes de Surveillance Importantes

```bash
# Voir l'√©tat du cluster
rabbitmqctl cluster_status

# Voir les connexions actives (avec TLS)
rabbitmqctl list_connections peer_host ssl ssl_protocol ssl_cipher

# Voir l'utilisation m√©moire
rabbitmqctl status | grep memory

# Voir les alarmes
rabbitmqctl list_alarms

# V√©rifier la sant√© du cluster
rabbitmqctl node_health_check
```

---

### Rotation des Certificats (Renouvellement)

**Les certificats expirent !** Voici la proc√©dure pour les renouveler :

**Tous les 6 mois minimum :**

1. **G√©n√©rer de nouveaux certificats** (m√™me processus que Partie 1)
2. **Pour chaque serveur, un par un :**
   ```bash
   # Copier les nouveaux certificats
   scp nouveau-serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem.new
   scp nouveau-serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem.new
   
   # Sur le serveur
   cd /etc/rabbitmq/certificats
   mv serveur.pem serveur.pem.old
   mv serveur-cle.pem serveur-cle.pem.old
   mv serveur.pem.new serveur.pem
   mv serveur-cle.pem.new serveur-cle.pem
   chmod 600 serveur-cle.pem
   
   # Red√©marrer RabbitMQ
   systemctl restart rabbitmq-server
   
   # Attendre 30 secondes
   sleep 30
   
   # V√©rifier
   rabbitmqctl node_health_check
   ```

3. **Distribuer les nouveaux certificats clients** aux √©quipes de d√©veloppement

---

## R√©sum√© des Fichiers Importants

### Sur le Poste d'Administration
```
/opt/rabbitmq-securite/
‚îú‚îÄ‚îÄ autorite-certification/
‚îÇ   ‚îú‚îÄ‚îÄ cle-ca.pem (‚ö†Ô∏è SECRET - Coffre-fort)
‚îÇ   ‚îî‚îÄ‚îÄ certificat-ca.pem (√Ä distribuer partout)
‚îú‚îÄ‚îÄ serveurs/
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur3-bundle.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur3-cle.pem (‚ö†Ô∏è SECRET)
‚îî‚îÄ‚îÄ clients/
    ‚îú‚îÄ‚îÄ app-production-certificat.pem
    ‚îî‚îÄ‚îÄ app-production-cle.pem (‚ö†Ô∏è SECRET)
```

### Sur Chaque Serveur RabbitMQ
```
/etc/rabbitmq/
‚îú‚îÄ‚îÄ certificats/
‚îÇ   ‚îú‚îÄ‚îÄ ca.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur-cle.pem (‚ö†Ô∏è SECRET - chmod 600)
‚îú‚îÄ‚îÄ rabbitmq.conf
‚îú‚îÄ‚îÄ inter-serveurs-tls.config
‚îî‚îÄ‚îÄ rabbitmq-env.conf

/var/lib/rabbitmq/
‚îî‚îÄ‚îÄ .erlang.cookie (‚ö†Ô∏è SECRET - chmod 400)
```

---

## Checklist de Mise en Production

- [ ] **Certificats cr√©√©s** pour CA, serveurs et clients
- [ ] **Certificats install√©s** sur les 3 serveurs
- [ ] **Configuration TLS** appliqu√©e (rabbitmq.conf)
- [ ] **TLS inter-serveurs** configur√© (inter-serveurs-tls.config)
- [ ] **Cookie Erlang identique** sur les 3 serveurs
- [ ] **Pare-feu** configur√© (ports 5671, 15671, 25672, 4369)
- [ ] **Cluster form√©** (3 n≈ìuds actifs)
- [ ] **Haute disponibilit√©** configur√©e (politique ha-all)
- [ ] **Utilisateur admin** cr√©√©
- [ ] **Test connexion TLS** depuis Python r√©ussi
- [ ] **Interface web HTTPS** accessible
- [ ] **Documentation** partag√©e avec l'√©quipe
- [ ] **Proc√©dure de rotation** des certificats planifi√©e
- [ ] **Sauvegardes** automatis√©es en place
- [ ] **Surveillance** (monitoring) activ√©e

---

## Support et D√©pannage

### Probl√®me : "Verify return code: 20 (unable to get local issuer certificate)"
**Solution :** Le certificat CA n'est pas trouv√© ou le chemin est incorrect.
```bash
# V√©rifier que le fichier existe
ls -l /etc/rabbitmq/certificats/ca.pem

# V√©rifier les permissions
chmod 644 /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : "Connection refused"
**Solution :** Le pare-feu bloque la connexion.
```bash
# V√©rifier les ports ouverts
firewall-cmd --list-ports

# Tester la connectivit√©
telnet rabbitmq-serveur1.entreprise.local 5671
```

### Probl√®me : "Handshake failed"
**Solution :** Incompatibilit√© TLS ou certificat expir√©.
```bash
# V√©rifier la date d'expiration
openssl x509 -in /etc/rabbitmq/certificats/serveur.pem -noout -dates

# Tester la connexion TLS manuellement
openssl s_client -connect localhost:5671 -CAfile /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : Le cluster ne se forme pas
**Solution :** Cookie Erlang diff√©rent ou probl√®me r√©seau.
```bash
# V√©rifier que le cookie est identique sur tous les serveurs
md5sum /var/lib/rabbitmq/.erlang.cookie

# V√©rifier la connectivit√© inter-serveurs
ping rabbitmq-serveur2.entreprise.local
telnet rabbitmq-serveur2.entreprise.local 25672
```

---
















2. Red√©marrer le cluster
   ```bash
   # D√©marrer serveur1 (master)
   ssh serveur1 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur2
   ssh serveur2 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur3
   ssh serveur3 "systemctl start rabbitmq-server"
   ```

3. V√©rifier la formation du cluster
   ```bash
   rabbitmqctl cluster_status
   ```

4. Notifier les √©quipes
   - Email urgent aux d√©veloppeurs
   - Mise √† jour status page

**Temps de r√©solution cible :** 15 minutes

---

### Incident Niveau 2 : MAJEUR (Performance D√©grad√©e)

**Sympt√¥mes :**
- Ralentissement des applications
- Files d'attente satur√©es
- Alarmes m√©moire

**Actions :**
1. Identifier la cause
   ```bash
   rabbitmqctl list_alarms
   rabbitmqctl list_queues name messages
   ```

2. Si alarme m√©moire :
   ```bash
   # Purger les queues non-critiques
   rabbitmqctl purge_queue nom-queue-non-critique
   
   # Force garbage collection
   rabbitmqctl eval 'garbage_collect().'
   ```

3. Si files satur√©es :
   - Augmenter le nombre de consumers
   - V√©rifier les applications lentes
   - Purger les messages anciens si n√©cessaire

**Temps de r√©solution cible :** 30 minutes

---

### Incident Niveau 3 : MINEUR (Certificat Expir√©)

**Sympt√¥mes :**
- Erreur "certificate has expired"
- Nouvelles connexions refus√©es
- Connexions existantes fonctionnent

**Actions :**
1. V√©rifier l'expiration
   ```bash
   openssl x509 -in /etc/rabbitmq/certificats/serveur.pem -noout -enddate
   ```

2. G√©n√©rer nouveaux certificats (voir Annexe A - Script 1)

3. D√©ployer en rolling restart (un serveur √† la fois)

4. Distribuer nouveaux certificats clients

**Temps de r√©solution cible :** 2 heures

---

### Incident Niveau 4 : Split-Brain (Partition R√©seau)

**Sympt√¥mes :**
- Cluster status indique "partitions"
- N≈ìuds ne communiquent plus entre eux

**Actions :**
1. Identifier la partition
   ```bash
   rabbitmqctl cluster_status | grep partitions
   ```

2. R√©solution manuelle (choisir un n≈ìud √† r√©initialiser)
   ```bash
   # Sur le n≈ìud partitionn√© (ex: serveur3)
   ssh serveur3 "
       rabbitmqctl stop_app
       rabbitmqctl reset
       rabbitmqctl join_cluster rabbit@rabbitmq-serveur1
       rabbitmqctl start_app
   "
   ```

3. V√©rifier la synchronisation

**Temps de r√©solution cible :** 45 minutes

---

## Annexe D : FAQ Manag√©riale

### üîê Questions S√©curit√©

**Q1 : Pourquoi TLS est-il obligatoire ?**

**R :** TLS chiffre toutes les communications, garantissant :
- **Confidentialit√©** : Personne ne peut lire les messages transitant sur le r√©seau
- **Authenticit√©** : V√©rification de l'identit√© des serveurs et applications
- **Int√©grit√©** : Protection contre la modification des donn√©es en transit
- **Conformit√©** : Respect RGPD, ISO 27001, PCI-DSS

Sans TLS, un attaquant pourrait :
- ‚ùå Intercepter les messages (attaque "man-in-the-middle")
- ‚ùå Modifier les donn√©es
- ‚ùå Se faire passer pour une application l√©gitime

---

**Q2 : Que se passe-t-il si un certificat est vol√© ?**

**R :** Actions imm√©diates :
1. **R√©voquer** le certificat compromis
2. **R√©g√©n√©rer** un nouveau certificat
3. **Auditer** les connexions suspectes dans les logs
4. **Notifier** l'√©quipe s√©curit√©

Le certificat CA (autorit√©) doit √™tre prot√©g√© comme un secret d'entreprise critique.

---

**Q3 : √Ä quelle fr√©quence renouveler les certificats ?**

**R :** 
- **Certificats serveurs** : Tous les 1-2 ans (cr√©√©s pour 2 ans)
- **Certificats clients** : Tous les 6-12 mois (cr√©√©s pour 1 an)
- **Certificat CA** : Tous les 5-10 ans (cr√©√© pour 10 ans)

**Bonne pratique** : Renouveler 1 mois AVANT l'expiration pour √©viter les interruptions.

---

### üìä Questions Performance

**Q4 : Combien de connexions le cluster peut-il g√©rer ?**

**R :** Avec la configuration actuelle (3 serveurs de 16GB RAM) :
- **Connexions simultan√©es** : ~15,000-20,000 (5,000-7,000 par serveur)
- **Messages/seconde** : ~50,000-100,000 (d√©pend de la taille des messages)

Pour augmenter :
- Ajouter des serveurs au cluster
- Augmenter la RAM (64GB recommand√© pour haute charge)

---

**Q5 : Quel est l'impact de TLS sur les performances ?**

**R :** Impact minimal avec mat√©riel moderne :
- **Latence ajout√©e** : +1-2ms par message (n√©gligeable)
- **CPU** : +10-15% d'utilisation (pour chiffrement/d√©chiffrement)
- **M√©moire** : +5-10% (buffers SSL)

Le gain en s√©curit√© compense largement ce l√©ger surco√ªt.

---

### üí∞ Questions Co√ªts

**Q6 : Quel est le co√ªt total de possession (TCO) ?**

**R :** Co√ªts annuels estim√©s (infrastructure moyenne) :

| Poste | Co√ªt annuel |
|-------|-------------|
| **Serveurs** (3x VM 4 CPU, 16GB RAM) | 15,000 ‚Ç¨ |
| **Stockage** (SSD 500GB x3) | 3,000 ‚Ç¨ |
| **Licences** (RabbitMQ Open Source) | 0 ‚Ç¨ |
| **Support** (optionnel, entreprise) | 10,000 ‚Ç¨ |
| **Personnel** (maintenance, 20% ETP) | 20,000 ‚Ç¨ |
| **Total** | **~48,000 ‚Ç¨** |

**Alternatives payantes :**
- Amazon MQ (AWS) : ~60,000-80,000 ‚Ç¨/an
- Azure Service Bus : ~50,000-70,000 ‚Ç¨/an
- CloudAMQP : ~40,000-60,000 ‚Ç¨/an

**‚úÖ Auto-h√©berg√© = √©conomies + contr√¥le total**

---

**Q7 : Quels sont les co√ªts cach√©s ?**

**R :** √Ä pr√©voir :
- Formation √©quipes (une fois) : 5,000 ‚Ç¨
- Outils monitoring (Grafana, Prometheus) : 2,000 ‚Ç¨/an
- Backup/DR (stockage S3) : 1,000 ‚Ç¨/an
- Renouvellement certificats (automatis√©) : 0 ‚Ç¨
- Audits s√©curit√© annuels : 3,000 ‚Ç¨/an

**Total co√ªts additionnels** : ~11,000 ‚Ç¨ premi√®re ann√©e, puis ~6,000 ‚Ç¨/an

---

### üéØ Questions Business

**Q8 : Quelle est la disponibilit√© garantie ?**

**R :** Avec 3 serveurs en cluster :
- **SLA th√©orique** : 99.9% (8h downtime/an max)
- **SLA r√©el observ√©** : 99.95% (4h downtime/an)

Un seul serveur peut tomber sans impact. Pour 99.99% (52min/an), passer √† 5 serveurs.

---

**Q9 : Combien de temps pour une mise en production ?**

**R :** Timeline r√©aliste :

| Phase | Dur√©e | Responsable |
|-------|-------|-------------|
| Infrastructure (serveurs, r√©seau) | 1 semaine | Ops |
| Cr√©ation certificats PKI | 2 jours | S√©curit√© |
| Installation RabbitMQ | 3 jours | Ops |
| Configuration TLS | 2 jours | Ops |
| Tests & validation | 5 jours | Ops + Dev |
| Formation d√©veloppeurs | 2 jours | Ops |
| Migration applications | 2 semaines | Dev |
| **TOTAL** | **4-5 semaines** | |

**Facteurs d'acc√©l√©ration :**
- Scripts d'automatisation (fournis)
- √âquipe d√©di√©e full-time
- Environnement de test disponible

---

**Q10 : Quels sont les risques principaux ?**

**R :** Matrice de risques :

| Risque | Probabilit√© | Impact | Mitigation |
|--------|-------------|--------|------------|
| **Panne mat√©rielle** | Moyenne | Faible | Cluster HA (3 serveurs) |
| **Certificat expir√©** | Faible | √âlev√© | Monitoring + alertes |
| **Saturation m√©moire** | Moyenne | Moyen | Alarmes + auto-scaling |
| **Faille s√©curit√©** | Faible | √âlev√© | TLS + audits r√©guliers |
| **Split-brain** | Faible | Moyen | D√©tection automatique |
| **Erreur humaine** | Moyenne | Moyen | Scripts + documentation |

**Plan de continuit√©** : Backup quotidien + proc√©dure DR test√©e

---

## Annexe E : Checklist de Mise en Production (Format Manag√©rial)

### Phase 1 : Pr√©paration (Semaine 1-2)

**Infrastructure**
- [ ] 3 serveurs provisionn√©s (4 CPU, 16GB RAM, 500GB SSD)
- [ ] R√©seau configur√© (VLAN priv√©)
- [ ] DNS configur√© (rabbitmq-serveur1/2/3.entreprise.local)
- [ ] Firewall rules approuv√©es
- [ ] Budget valid√©

**√âquipe**
- [ ] Chef de projet d√©sign√©
- [ ] Ops assign√©s (2 personnes, 50% temps)
- [ ] S√©curit√© impliqu√©e (certificats)
- [ ] D√©veloppeurs inform√©s (2 jours formation pr√©vus)

**Documentation**
- [ ] Architecture valid√©e par le CTO
- [ ] Plan de migration approuv√©
- [ ] Proc√©dures DR document√©es
- [ ] Runbook op√©rationnel cr√©√©

---

### Phase 2 : Impl√©mentation (Semaine 3-4)

**S√©curit√© TLS**
- [ ] Autorit√© de certification (CA) cr√©√©e
- [ ] Certificats serveurs g√©n√©r√©s (3x)
- [ ] Certificats clients g√©n√©r√©s (par application)
- [ ] Cl√© CA sauvegard√©e en coffre-fort
- [ ] Politique de rotation d√©finie (6 mois)

**Installation**
- [ ] RabbitMQ install√© sur 3 serveurs
- [ ] Configuration TLS clients appliqu√©e
- [ ] Configuration TLS inter-serveurs appliqu√©e
- [ ] Cluster form√© et v√©rifi√©
- [ ] Haute disponibilit√© configur√©e

**Tests**
- [ ] Connexion TLS valid√©e (OpenSSL)
- [ ] Connexion Python test√©e
- [ ] Failover test√© (arr√™t 1 serveur)
- [ ] Performance test√©e (load test)
- [ ] S√©curit√© audit√©e (scan vuln√©rabilit√©s)

---

### Phase 3 : Monitoring & Backup (Semaine 4)

**Surveillance**
- [ ] Prometheus configur√©
- [ ] Grafana dashboards cr√©√©s
- [ ] Alertes email configur√©es
- [ ] Script v√©rification automatique (cron)
- [ ] Astreinte d√©finie

**Sauvegarde**
- [ ] Script backup automatis√©
- [ ] Stockage distant configur√© (S3)
- [ ] R√©tention d√©finie (30 jours)
- [ ] Restore test√© en environnement de test
- [ ] RTO/RPO valid√©s (2h/1h)

---

### Phase 4 : Formation & Migration (Semaine 5-6)

**Formation D√©veloppeurs**
- [ ] Session formation TLS (2h)
- [ ] Exemples code Python distribu√©s
- [ ] Certificats clients distribu√©s
- [ ] Support technique dispo (hotline)
- [ ] FAQ publi√©e

**Migration Applications**
- [ ] Planning migration valid√©
- [ ] Applications non-critiques migr√©es (pilote)
- [ ] Applications critiques migr√©es (progressif)
- [ ] Tests post-migration OK
- [ ] Ancien syst√®me d√©commissionn√©

---

### Phase 5 : Go-Live (Semaine 7)

**Production**
- [ ] Mise en production valid√©e (comit√©)
- [ ] Monitoring actif 24/7
- [ ] √âquipe support en astreinte
- [ ] Communication interne (succ√®s)
- [ ] R√©trospective planifi√©e (J+30)

**Post-Production**
- [ ] Revue incidents (J+7)
- [ ] Optimisation performance (J+30)
- [ ] Audit s√©curit√© (J+60)
- [ ] Documentation mise √† jour
- [ ] Le√ßons apprises partag√©es

---

## Annexe F : KPI de Suivi (Dashboard Manag√©rial)

### KPI Techniques (Hebdomadaire)

| Indicateur | Cible | Seuil Alerte | Mesure |
|------------|-------|--------------|--------|
| **Disponibilit√© cluster** | 99.9% | < 99.5% | Uptime monitoring |
| **Temps de r√©ponse moyen** | < 50ms | > 100ms | Application logs |
| **Messages/seconde** | 10,000+ | < 5,000 | RabbitMQ metrics |
| **Utilisation m√©moire** | < 70% | > 85% | Server monitoring |
| **Files satur√©es** | 0 | > 3 | RabbitMQ admin |
| **Connexions non-TLS** | 0 | > 0 | Security audit |

---

### KPI S√©curit√© (Mensuel)

| Indicateur | Cible | Status |
|------------|-------|--------|
| **Certificats expir√©s** | 0 | üü¢ Monitoring actif |
| **Tentatives connexion refus√©es** | < 100/jour | üü¢ Logs analys√©s |
| **Audits s√©curit√©** | Trimestriel | üü¢ Prochain: D√©c 2025 |
| **Vuln√©rabilit√©s critiques** | 0 | üü¢ Scan automatique |
| **Incidents s√©curit√©** | 0 | üü¢ Aucun √† date |

---

### KPI Business (Trimestriel)

| Indicateur | Q1 | Q2 | Q3 | Q4 | Tendance |
|------------|----|----|----|----|----------|
| **Co√ªt total** | 12k‚Ç¨ | 11k‚Ç¨ | 11k‚Ç¨ | 14k‚Ç¨ | ‚¨áÔ∏è Stable |
| **Incidents majeurs** | 0 | 1 | 0 | 0 | üü¢ Excellent |
| **Temps downtime** | 30min | 2h | 15min | 0 | üü¢ S'am√©liore |
| **Applications migr√©es** | 5 | 12 | 20 | 25 | ‚¨ÜÔ∏è Objectif atteint |
| **Satisfaction dev** | 8/10 | 8.5/10 | 9/10 | 9/10 | ‚¨ÜÔ∏è Tr√®s bon |

---

## Conclusion : B√©n√©fices de la Solution

### üîê S√©curit√© Renforc√©e
- ‚úÖ **100% des communications chiffr√©es** (TLS 1.2/1.3)
- ‚úÖ **Authentification mutuelle** (mTLS)
- ‚úÖ **Conformit√© r√©glementaire** (RGPD, ISO 27001)
- ‚úÖ **Audit trail complet**

### üöÄ Haute Disponibilit√©
- ‚úÖ **99.9% uptime** garanti
- ‚úÖ **Pas de point unique de d√©faillance**
- ‚úÖ **Failover automatique** (< 5 secondes)
- ‚úÖ **Donn√©es r√©pliqu√©es** sur 3 serveurs

### üí∞ Ma√Ætrise des Co√ªts
- ‚úÖ **TCO optimis√©** (~50k‚Ç¨/an vs 70k‚Ç¨+ cloud)
- ‚úÖ **Open source** (pas de licence)
- ‚úÖ **√âvolutif** (ajouter serveurs facilement)
- ‚úÖ **Ind√©pendance** (pas de vendor lock-in)

### ‚ö° Performance
- ‚úÖ **50,000+ messages/sec** (capacit√©)
- ‚úÖ **Latence < 50ms** (moyenne)
- ‚úÖ **20,000 connexions** simultan√©es
- ‚úÖ **Impact TLS minimal** (+2ms)

### üõ†Ô∏è Op√©rabilit√©
- ‚úÖ **Scripts automatis√©s** (d√©ploiement, backup)
- ‚úÖ **Monitoring complet** (Prometheus/Grafana)
- ‚úÖ **Documentation claire** (pour tous niveaux)
- ‚úÖ **Support interne** (√©quipe form√©e)

---

## Prochaines √âtapes (Roadmap)

### Court terme (0-3 mois)
1. **Optimisation** : Tuning performances apr√®s donn√©es production
2. **Monitoring avanc√©** : Ajout m√©triques business
3. **Formation avanc√©e** : Session d√©veloppeurs experts

### Moyen terme (3-6 mois)
1. **Multi-datacenter** : R√©plication g√©ographique (DR)
2. **Auto-scaling** : Ajout automatique de n≈ìuds selon charge
3. **API Gateway** : Int√©gration avec Kong/Apigee

### Long terme (6-12 mois)
1. **Migration cloud hybride** : Option Azure/AWS si besoin
2. **Machine Learning** : Pr√©diction des pics de charge
3. **Zero-trust** : Int√©gration avec solution IAM entreprise

---

## üìû Contacts & Support

### √âquipe Projet
- **Chef de projet** : [nom]@entreprise.com
- **Tech Lead Infrastructure** : ops@entreprise.com
- **Responsable S√©curit√©** : security@entreprise.com

### Support Technique
- **Niveau 1** (24/7) : +33 X XX XX XX XX
- **Niveau 2** (heures bureau) : support-rabbitmq@entreprise.com
- **Niveau 3** (escalade) : cto@entreprise.com

### Documentation
- **Wiki interne** : https://wiki.entreprise.com/rabbitmq
- **Runbook** : https://docs.entreprise.com/rabbitmq/ops
- **Code source** : https://git.entreprise.com/infra/rabbitmq

---

## üìö Ressources Externes

### Documentation Officielle
- **RabbitMQ TLS** : https://www.rabbitmq.com/ssl.html
- **RabbitMQ Clustering** : https://www.rabbitmq.com/clustering.html
- **Pika (Python)** : https://pika.readthedocs.io/

### Formation & Certification
- **RabbitMQ Academy** : https://academy.rabbitmq.com
- **Linux Foundation** : https://training.linuxfoundation.org

### Communaut√©
- **Forum RabbitMQ** : https://groups.google.com/forum/#!forum/rabbitmq-users
- **Stack Overflow** : Tag `rabbitmq` + `ssl`
- **GitHub Issues** : https://github.com/rabbitmq/rabbitmq-server/issues

---

**üìÑ Version du Document** : 2.0  
**üìÖ Date** : Octobre 2025  
**‚úçÔ∏è R√©dacteur** : √âquipe Infrastructure  
**‚úÖ Valid√© par** : CTO + RSSI  
**üîÑ Prochaine r√©vision** : Janvier 2026

---

## üéì Glossaire pour Non-Techniciens

**AMQP** : Protocole de messagerie (langage de communication entre applications)

**CA (Certificate Authority)** : Autorit√© qui √©met les certificats, comme un notaire num√©rique

**Certificat** : Document √©lectronique prouvant l'identit√© (comme une carte d'identit√©)

**Chiffrement** : Transformation des donn√©es en code secret

**Cluster** : Groupe de serveurs travaillant ensemble

**Failover** : Bascule automatique vers un serveur de secours

**Haute disponibilit√© (HA)** : Syst√®me qui fonctionne presque tout le temps (99.9%+)

**Heartbeat** : Signal r√©gulier prouvant qu'un syst√®me est vivant

**mTLS** : Authentification mutuelle (les 2 parties prouvent leur identit√©)

**Queue (file d'attente)** : Zone de stockage temporaire des messages

**Split-brain** : Situation o√π des serveurs ne communiquent plus entre eux

**SSL/TLS** : Technologies de s√©curisation des communications Internet

**TCO** : Total Cost of Ownership (co√ªt total de possession)

**Uptime** : Temps pendant lequel le syst√®me est disponible

---

**FIN DU DOCUMENT**

Pour toute question, contactez : infrastructure@entreprise.com# Guide RabbitMQ Cluster Hautement Disponible avec S√©curit√© TLS

## Vue d'Ensemble Ex√©cutive

Ce document d√©crit la mise en place d'un syst√®me de messagerie RabbitMQ **s√©curis√©** et **hautement disponible** pour l'entreprise. La solution garantit :

- ‚úÖ **S√©curit√© maximale** : Toutes les communications sont chiffr√©es (TLS/SSL)
- ‚úÖ **Haute disponibilit√©** : Le syst√®me continue de fonctionner m√™me si un serveur tombe
- ‚úÖ **Conformit√©** : Respect des standards de s√©curit√© informatique

### Qu'est-ce que TLS/SSL ?

**TLS (Transport Layer Security)** est comme un tunnel s√©curis√© pour les donn√©es. Imaginez :
- üîí Une conversation t√©l√©phonique chiffr√©e que personne ne peut √©couter
- üÜî Des papiers d'identit√© num√©riques (certificats) pour v√©rifier l'identit√© de chacun
- üõ°Ô∏è Une protection contre les pirates informatiques

---

## Architecture Simplifi√©e

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ     APPLICATIONS (Python, Java, etc)    ‚îÇ
‚îÇ         avec certificats clients        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ Connexions TLS chiffr√©es
               ‚îÇ
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                     ‚îÇ              ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇServeur1‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇServeur2 ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇServeur3 ‚îÇ
‚îÇRabbitMQ‚îÇ   TLS    ‚îÇRabbitMQ ‚îÇTLS ‚îÇRabbitMQ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    Communications inter-serveurs chiffr√©es
```

**3 serveurs RabbitMQ** travaillent ensemble :
- Si un serveur tombe, les 2 autres continuent
- Les donn√©es sont r√©pliqu√©es automatiquement
- Toutes les communications sont chiffr√©es

---

## Partie 1 : Cr√©ation des Certificats de S√©curit√©

### Comprendre les Certificats

Pensez aux certificats comme des **cartes d'identit√© num√©riques** :

1. **Autorit√© de Certification (CA)** = Le gouvernement qui √©met les cartes d'identit√©
2. **Certificat Serveur** = Carte d'identit√© de chaque serveur RabbitMQ
3. **Certificat Client** = Carte d'identit√© de chaque application

### √âtape 1 : Cr√©er l'Autorit√© de Certification (CA)

**Pourquoi ?** C'est l'autorit√© qui va "signer" tous les autres certificats pour garantir leur authenticit√©.

```bash
# Cr√©er le dossier pour stocker les certificats
mkdir -p /opt/rabbitmq-securite/autorite-certification
cd /opt/rabbitmq-securite/autorite-certification

# Cr√©er la cl√© priv√©e de l'autorit√© (mot de passe requis)
openssl genrsa -aes256 -out cle-ca.pem 4096

# Cr√©er le certificat de l'autorit√© (valable 10 ans)
openssl req -new -x509 -days 3650 -key cle-ca.pem -out certificat-ca.pem \
  -subj "/C=FR/ST=Ile-de-France/L=Paris/O=VotreEntreprise/CN=Autorite RabbitMQ"
```

**‚ö†Ô∏è IMPORTANT** : Sauvegardez `cle-ca.pem` dans un coffre-fort s√©curis√©. C'est la cl√© ma√Ætresse !

---

### √âtape 2 : Cr√©er les Certificats pour les Serveurs RabbitMQ

**Pourquoi ?** Chaque serveur a besoin de prouver son identit√©.

```bash
# Cr√©er le dossier pour les certificats serveurs
mkdir -p /opt/rabbitmq-securite/serveurs
cd /opt/rabbitmq-securite/serveurs

# Pour chaque serveur (r√©p√©ter pour serveur1, serveur2, serveur3)
SERVEUR="serveur1"

# 1. Cr√©er la cl√© priv√©e du serveur
openssl genrsa -out ${SERVEUR}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${SERVEUR}-cle.pem -out ${SERVEUR}-demande.csr \
  -subj "/C=FR/ST=Ile-de-France/O=VotreEntreprise/CN=rabbitmq-${SERVEUR}.entreprise.local"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${SERVEUR}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${SERVEUR}-certificat.pem \
  -days 730 -sha384

# 4. Cr√©er le "bundle" (certificat + autorit√© CA)
cat ${SERVEUR}-certificat.pem ../autorite-certification/certificat-ca.pem > \
    ${SERVEUR}-bundle.pem
```

**R√©p√©tez cette op√©ration pour serveur2 et serveur3.**

---

### √âtape 3 : Cr√©er les Certificats pour les Applications Clientes

**Pourquoi ?** Pour que seules les applications autoris√©es puissent se connecter.

```bash
# Cr√©er le dossier pour les certificats clients
mkdir -p /opt/rabbitmq-securite/clients
cd /opt/rabbitmq-securite/clients

# Pour chaque application (exemple: app-production)
APPLICATION="app-production"

# 1. Cr√©er la cl√© priv√©e du client
openssl genrsa -out ${APPLICATION}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${APPLICATION}-cle.pem -out ${APPLICATION}-demande.csr \
  -subj "/C=FR/O=VotreEntreprise/CN=${APPLICATION}"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${APPLICATION}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${APPLICATION}-certificat.pem \
  -days 365 -sha384
```

**R√©sum√© des fichiers cr√©√©s :**
- `certificat-ca.pem` : L'autorit√© de certification (√† distribuer partout)
- `serveurX-bundle.pem` : Certificat de chaque serveur
- `serveurX-cle.pem` : Cl√© priv√©e de chaque serveur (SECRET)
- `app-production-certificat.pem` : Certificat de l'application
- `app-production-cle.pem` : Cl√© priv√©e de l'application (SECRET)

---

## Partie 2 : Configuration TLS des Serveurs RabbitMQ

### √âtape 1 : Installer les Certificats sur Chaque Serveur

```bash
# Sur chaque serveur (serveur1, serveur2, serveur3)
# Se connecter en SSH au serveur

# Cr√©er le dossier s√©curis√©
sudo mkdir -p /etc/rabbitmq/certificats
sudo chown rabbitmq:rabbitmq /etc/rabbitmq/certificats
sudo chmod 700 /etc/rabbitmq/certificats

# Copier les fichiers depuis votre poste
# (Adapter "serveur1" selon le serveur)
scp certificat-ca.pem serveur1:/etc/rabbitmq/certificats/ca.pem
scp serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem
scp serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem

# S√©curiser les permissions
sudo chmod 600 /etc/rabbitmq/certificats/serveur-cle.pem
sudo chmod 644 /etc/rabbitmq/certificats/serveur.pem
sudo chmod 644 /etc/rabbitmq/certificats/ca.pem
```

---

### √âtape 2 : Configuration TLS pour les Connexions Clients

**Fichier : `/etc/rabbitmq/rabbitmq.conf`**

```conf
# ============================================================================
# CONFIGURATION TLS RABBITMQ - CONNEXIONS CLIENTS
# ============================================================================

# D√©sactiver les connexions non-s√©curis√©es (sans TLS)
listeners.tcp = none

# Activer uniquement les connexions TLS s√©curis√©es
listeners.ssl.default = 5671

# --- CHEMINS DES CERTIFICATS ---
# Certificat de l'autorit√© (CA) pour v√©rifier les clients
ssl_options.cacertfile = /etc/rabbitmq/certificats/ca.pem

# Certificat de ce serveur
ssl_options.certfile = /etc/rabbitmq/certificats/serveur.pem

# Cl√© priv√©e de ce serveur (SECRET)
ssl_options.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- S√âCURIT√â RENFORC√âE ---
# V√©rifier OBLIGATOIREMENT l'identit√© du client
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true

# Profondeur de v√©rification de la cha√Æne de certificats
ssl_options.depth = 2

# --- PROTOCOLES TLS AUTORIS√âS ---
# Utiliser uniquement TLS 1.2 et TLS 1.3 (les plus s√©curis√©s)
ssl_options.versions.1 = tlsv1.3
ssl_options.versions.2 = tlsv1.2

# --- ALGORITHMES DE CHIFFREMENT ---
# Utiliser uniquement les algorithmes modernes et s√©curis√©s
ssl_options.ciphers.1 = TLS_AES_256_GCM_SHA384
ssl_options.ciphers.2 = TLS_AES_128_GCM_SHA256
ssl_options.ciphers.3 = ECDHE-RSA-AES256-GCM-SHA384
ssl_options.ciphers.4 = ECDHE-RSA-AES128-GCM-SHA256

# Pr√©f√©rer l'ordre des algorithmes du serveur
ssl_options.honor_cipher_order = true

# --- INTERFACE D'ADMINISTRATION (HTTPS) ---
# D√©sactiver HTTP non-s√©curis√©
management.tcp.port = none

# Activer HTTPS pour l'administration
management.ssl.port = 15671
management.ssl.cacertfile = /etc/rabbitmq/certificats/ca.pem
management.ssl.certfile = /etc/rabbitmq/certificats/serveur.pem
management.ssl.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- CONFIGURATION CLUSTER ---
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-serveur1
cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-serveur2
cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-serveur3

# Heartbeat entre les n≈ìuds (10 secondes)
cluster_keepalive_interval = 10000

# --- HAUTE DISPONIBILIT√â ---
# Les files d'attente "quorum" sont r√©pliqu√©es sur les 3 serveurs
# M√©moire et disque
vm_memory_high_watermark.relative = 0.6
disk_free_limit.absolute = 5GB

# Timeout des connexions
heartbeat = 60
```

**üí° Explication simplifi√©e :**
- ‚úÖ Seules les connexions chiffr√©es TLS sont accept√©es
- ‚úÖ Les clients DOIVENT pr√©senter un certificat valide
- ‚úÖ Les protocoles anciens et non-s√©curis√©s sont d√©sactiv√©s
- ‚úÖ L'interface web d'administration est aussi s√©curis√©e (HTTPS)

---

### √âtape 3 : Configuration TLS pour les Communications Entre Serveurs

**Pourquoi ?** Les 3 serveurs RabbitMQ doivent aussi communiquer de fa√ßon s√©curis√©e entre eux.

**Fichier : `/etc/rabbitmq/inter-serveurs-tls.config`**

```erlang
%% ============================================================================
%% CONFIGURATION TLS POUR COMMUNICATIONS INTER-SERVEURS
%% ============================================================================

[
  {kernel, [
    {inet_dist_use_interface, {0,0,0,0}},
    {inet_dist_listen_min, 25672},
    {inet_dist_listen_max, 25672}
  ]},
  
  {rabbit, [
    {ssl_dist_opt, [
      %% Configuration SERVEUR (pour recevoir les connexions)
      {server, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        %% V√©rifier l'identit√© de l'autre serveur
        {verify, verify_peer},
        {fail_if_no_peer_cert, true},
        
        %% Utiliser TLS 1.2 et 1.3
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        %% Algorithmes de chiffrement s√©curis√©s
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384",
          "ECDHE-RSA-AES128-GCM-SHA256"
        ]}
      ]},
      
      %% Configuration CLIENT (pour initier les connexions)
      {client, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        {verify, verify_peer},
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384"
        ]}
      ]}
    ]}
  ]}
].
```

**üí° Point cl√© :** Cette configuration active TLS pour les communications "cach√©es" entre serveurs (le c≈ìur du cluster).

---

### √âtape 4 : Configuration Environnement Erlang

**Fichier : `/etc/rabbitmq/rabbitmq-env.conf`**

```bash
# ============================================================================
# CONFIGURATION ENVIRONNEMENT RABBITMQ
# ============================================================================

# Nom du n≈ìud (ADAPTER selon le serveur: serveur1, serveur2, serveur3)
NODENAME=rabbit@rabbitmq-serveur1

# Cookie partag√© entre TOUS les serveurs (doit √™tre identique)
# G√©n√©rer avec: openssl rand -base64 32
HOME=/var/lib/rabbitmq

# ACTIVER TLS pour les communications inter-serveurs
SERVER_ADDITIONAL_ERL_ARGS="-proto_dist inet_tls -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config"
```

**‚ö†Ô∏è CRITIQUE** : Le cookie Erlang doit √™tre **identique** sur les 3 serveurs !

```bash
# Sur TOUS les serveurs, cr√©er le m√™me cookie
echo "VOTRE_COOKIE_SECRET_ICI" > /var/lib/rabbitmq/.erlang.cookie
chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
chmod 400 /var/lib/rabbitmq/.erlang.cookie
```

---

### √âtape 5 : Configuration du Pare-feu

**Pourquoi ?** Autoriser uniquement les ports n√©cessaires et s√©curis√©s.

```bash
# Sur chaque serveur

# Ports √† ouvrir:
# - 5671 : Connexions clients TLS
# - 15671 : Interface web HTTPS
# - 25672 : Communication inter-serveurs TLS
# - 4369 : Service Erlang (epmd)

firewall-cmd --permanent --add-port=5671/tcp   # AMQP TLS
firewall-cmd --permanent --add-port=15671/tcp  # Management HTTPS
firewall-cmd --permanent --add-port=25672/tcp  # Cluster TLS
firewall-cmd --permanent --add-port=4369/tcp   # Erlang
firewall-cmd --reload
```

---

## Partie 3 : Formation du Cluster

### √âtape 1 : D√©marrer le Premier Serveur

```bash
# Sur serveur1
systemctl start rabbitmq-server
systemctl enable rabbitmq-server

# Activer le plugin d'administration web
rabbitmq-plugins enable rabbitmq_management

# Cr√©er un utilisateur administrateur
rabbitmqctl add_user admin MotDePasseSecurise123!
rabbitmqctl set_user_tags admin administrator
rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"

# V√©rifier que TLS fonctionne
rabbitmq-diagnostics listeners
# Vous devez voir: Port 5671 (ssl)
```

---

### √âtape 2 : Ajouter les Autres Serveurs au Cluster

```bash
# Sur serveur2
systemctl start rabbitmq-server

# Arr√™ter l'application RabbitMQ (pas le syst√®me)
rabbitmqctl stop_app

# Rejoindre le cluster
rabbitmqctl join_cluster rabbit@rabbitmq-serveur1

# Red√©marrer l'application
rabbitmqctl start_app

# V√©rifier
rabbitmqctl cluster_status
```

**R√©p√©ter sur serveur3.**

---

### √âtape 3 : Configurer la Haute Disponibilit√©

```bash
# Sur n'importe quel serveur du cluster
# Cr√©er une politique pour que les files soient r√©pliqu√©es sur les 3 serveurs

rabbitmqctl set_policy ha-all ".*" \
  '{"ha-mode":"all","ha-sync-mode":"automatic"}' \
  --priority 1 \
  --apply-to queues
```

**üí° R√©sultat :** Toutes les files d'attente seront automatiquement r√©pliqu√©es sur les 3 serveurs.

---

## Partie 4 : Tester la Connexion S√©curis√©e

### Test 1 : V√©rifier les Certificats

```bash
# Tester la connexion TLS au serveur
openssl s_client -connect rabbitmq-serveur1.entreprise.local:5671 \
  -cert /opt/rabbitmq-securite/clients/app-production-certificat.pem \
  -key /opt/rabbitmq-securite/clients/app-production-cle.pem \
  -CAfile /opt/rabbitmq-securite/autorite-certification/certificat-ca.pem

# Si succ√®s, vous verrez:
# Verify return code: 0 (ok)
```

---

### Test 2 : Connexion depuis Python

**Installation de la biblioth√®que Python :**

```bash
pip install pika
```

**Code Python de test :**

```python
import pika
import ssl

# ============================================================================
# CONFIGURATION TLS POUR PYTHON
# ============================================================================

# 1. Cr√©er le contexte SSL/TLS
contexte_ssl = ssl.create_default_context(
    cafile="/chemin/vers/certificat-ca.pem"
)

# 2. Charger le certificat et la cl√© de l'application
contexte_ssl.load_cert_chain(
    certfile="/chemin/vers/app-production-certificat.pem",
    keyfile="/chemin/vers/app-production-cle.pem"
)

# 3. V√©rifier le nom du serveur
contexte_ssl.check_hostname = True
contexte_ssl.verify_mode = ssl.CERT_REQUIRED

# 4. Configurer la connexion RabbitMQ
identifiants = pika.PlainCredentials('admin', 'MotDePasseSecurise123!')

parametres = pika.ConnectionParameters(
    host='rabbitmq-serveur1.entreprise.local',
    port=5671,
    virtual_host='/',
    credentials=identifiants,
    ssl_options=pika.SSLOptions(contexte_ssl),
    heartbeat=60,
    blocked_connection_timeout=300
)

# 5. Se connecter
try:
    connexion = pika.BlockingConnection(parametres)
    canal = connexion.channel()
    
    print("‚úÖ Connexion TLS r√©ussie !")
    
    # 6. Cr√©er une file d'attente
    canal.queue_declare(
        queue='test-securise',
        durable=True
    )
    
    # 7. Envoyer un message
    canal.basic_publish(
        exchange='',
        routing_key='test-securise',
        body='Message de test s√©curis√©',
        properties=pika.BasicProperties(
            delivery_mode=2,  # Message persistant
        )
    )
    
    print("‚úÖ Message envoy√© avec succ√®s !")
    
    connexion.close()
    
except Exception as e:
    print(f"‚ùå Erreur de connexion : {e}")
```

---

## Partie 5 : Surveillance et Maintenance

### Acc√©der √† l'Interface Web (HTTPS)

Ouvrez votre navigateur :
```
https://rabbitmq-serveur1.entreprise.local:15671
```

**‚ö†Ô∏è Note :** Votre navigateur affichera un avertissement car le certificat est auto-sign√©. C'est normal. Ajoutez une exception de s√©curit√©.

Connectez-vous avec l'utilisateur `admin` cr√©√© pr√©c√©demment.

---

### Commandes de Surveillance Importantes

```bash
# Voir l'√©tat du cluster
rabbitmqctl cluster_status

# Voir les connexions actives (avec TLS)
rabbitmqctl list_connections peer_host ssl ssl_protocol ssl_cipher

# Voir l'utilisation m√©moire
rabbitmqctl status | grep memory

# Voir les alarmes
rabbitmqctl list_alarms

# V√©rifier la sant√© du cluster
rabbitmqctl node_health_check
```

---

### Rotation des Certificats (Renouvellement)

**Les certificats expirent !** Voici la proc√©dure pour les renouveler :

**Tous les 6 mois minimum :**

1. **G√©n√©rer de nouveaux certificats** (m√™me processus que Partie 1)
2. **Pour chaque serveur, un par un :**
   ```bash
   # Copier les nouveaux certificats
   scp nouveau-serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem.new
   scp nouveau-serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem.new
   
   # Sur le serveur
   cd /etc/rabbitmq/certificats
   mv serveur.pem serveur.pem.old
   mv serveur-cle.pem serveur-cle.pem.old
   mv serveur.pem.new serveur.pem
   mv serveur-cle.pem.new serveur-cle.pem
   chmod 600 serveur-cle.pem
   
   # Red√©marrer RabbitMQ
   systemctl restart rabbitmq-server
   
   # Attendre 30 secondes
   sleep 30
   
   # V√©rifier
   rabbitmqctl node_health_check
   ```

3. **Distribuer les nouveaux certificats clients** aux √©quipes de d√©veloppement

---

## R√©sum√© des Fichiers Importants

### Sur le Poste d'Administration
```
/opt/rabbitmq-securite/
‚îú‚îÄ‚îÄ autorite-certification/
‚îÇ   ‚îú‚îÄ‚îÄ cle-ca.pem (‚ö†Ô∏è SECRET - Coffre-fort)
‚îÇ   ‚îî‚îÄ‚îÄ certificat-ca.pem (√Ä distribuer partout)
‚îú‚îÄ‚îÄ serveurs/
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur3-bundle.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur3-cle.pem (‚ö†Ô∏è SECRET)
‚îî‚îÄ‚îÄ clients/
    ‚îú‚îÄ‚îÄ app-production-certificat.pem
    ‚îî‚îÄ‚îÄ app-production-cle.pem (‚ö†Ô∏è SECRET)
```

### Sur Chaque Serveur RabbitMQ
```
/etc/rabbitmq/
‚îú‚îÄ‚îÄ certificats/
‚îÇ   ‚îú‚îÄ‚îÄ ca.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur-cle.pem (‚ö†Ô∏è SECRET - chmod 600)
‚îú‚îÄ‚îÄ rabbitmq.conf
‚îú‚îÄ‚îÄ inter-serveurs-tls.config
‚îî‚îÄ‚îÄ rabbitmq-env.conf

/var/lib/rabbitmq/
‚îî‚îÄ‚îÄ .erlang.cookie (‚ö†Ô∏è SECRET - chmod 400)
```

---

## Checklist de Mise en Production

- [ ] **Certificats cr√©√©s** pour CA, serveurs et clients
- [ ] **Certificats install√©s** sur les 3 serveurs
- [ ] **Configuration TLS** appliqu√©e (rabbitmq.conf)
- [ ] **TLS inter-serveurs** configur√© (inter-serveurs-tls.config)
- [ ] **Cookie Erlang identique** sur les 3 serveurs
- [ ] **Pare-feu** configur√© (ports 5671, 15671, 25672, 4369)
- [ ] **Cluster form√©** (3 n≈ìuds actifs)
- [ ] **Haute disponibilit√©** configur√©e (politique ha-all)
- [ ] **Utilisateur admin** cr√©√©
- [ ] **Test connexion TLS** depuis Python r√©ussi
- [ ] **Interface web HTTPS** accessible
- [ ] **Documentation** partag√©e avec l'√©quipe
- [ ] **Proc√©dure de rotation** des certificats planifi√©e
- [ ] **Sauvegardes** automatis√©es en place
- [ ] **Surveillance** (monitoring) activ√©e

---

## Support et D√©pannage

### Probl√®me : "Verify return code: 20 (unable to get local issuer certificate)"
**Solution :** Le certificat CA n'est pas trouv√© ou le chemin est incorrect.
```bash
# V√©rifier que le fichier existe
ls -l /etc/rabbitmq/certificats/ca.pem

# V√©rifier les permissions
chmod 644 /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : "Connection refused"
**Solution :** Le pare-feu bloque la connexion.
```bash
# V√©rifier les ports ouverts
firewall-cmd --list-ports

# Tester la connectivit√©
telnet rabbitmq-serveur1.entreprise.local 5671
```

### Probl√®me : "Handshake failed"
**Solution :** Incompatibilit√© TLS ou certificat expir√©.
```bash
# V√©rifier la date d'expiration
openssl x509 -in /etc/rabbitmq/certificats/serveur.pem -noout -dates

# Tester la connexion TLS manuellement
openssl s_client -connect localhost:5671 -CAfile /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : Le cluster ne se forme pas
**Solution :** Cookie Erlang diff√©rent ou probl√®me r√©seau.
```bash
# V√©rifier que le cookie est identique sur tous les serveurs
md5sum /var/lib/rabbitmq/.erlang.cookie

# V√©rifier la connectivit√© inter-serveurs
ping rabbitmq-serveur2.entreprise.local
telnet rabbitmq-serveur2.entreprise.local 25672
```

---




2. Red√©marrer le cluster
   ```bash
   # D√©marrer serveur1 (master)
   ssh serveur1 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur2
   ssh serveur2 "systemctl start rabbitmq-server"
   sleep 10
   
   # D√©marrer serveur3
   ssh serveur3 "systemctl start rabbitmq-server"
   ```

3. V√©rifier la formation du cluster
   ```bash
   rabbitmqctl cluster_status
   ```

4. Notifier les √©quipes
   - Email urgent aux d√©veloppeurs
   - Mise √† jour status page

**Temps de r√©solution cible :** 15 minutes

---

### Incident Niveau 2 : MAJEUR (Performance D√©grad√©e)

**Sympt√¥mes :**
- Ralentissement des applications
- Files d'attente satur√©es
- Alarmes m√©moire

**Actions :**
1. Identifier la cause
   ```bash
   rabbitmqctl list_alarms
   rabbitmqctl list_queues name messages
   ```

2. Si alarme m√©moire :
   ```bash
   # Purger les queues non-critiques
   rabbitmqctl purge_queue nom-queue-non-critique
   
   # Force garbage collection
   rabbitmqctl eval 'garbage_collect().'
   ```

3. Si files satur√©es :
   - Augmenter le nombre de consumers
   - V√©rifier les applications lentes
   - Purger les messages anciens si n√©cessaire

**Temps de r√©solution cible :** 30 minutes

---

### Incident Niveau 3 : MINEUR (Certificat Expir√©)

**Sympt√¥mes :**
- Erreur "certificate has expired"
- Nouvelles connexions refus√©es
- Connexions existantes fonctionnent

**Actions :**
1. V√©rifier l'expiration
   ```bash
   openssl x509 -in /etc/rabbitmq/certificats/serveur.pem -noout -enddate
   ```

2. G√©n√©rer nouveaux certificats (voir Annexe A - Script 1)

3. D√©ployer en rolling restart (un serveur √† la fois)

4. Distribuer nouveaux certificats clients

**Temps de r√©solution cible :** 2 heures

---

### Incident Niveau 4 : Split-Brain (Partition R√©seau)

**Sympt√¥mes :**
- Cluster status indique "partitions"
- N≈ìuds ne communiquent plus entre eux

**Actions :**
1. Identifier la partition
   ```bash
   rabbitmqctl cluster_status | grep partitions
   ```

2. R√©solution manuelle (choisir un n≈ìud √† r√©initialiser)
   ```bash
   # Sur le n≈ìud partitionn√© (ex: serveur3)
   ssh serveur3 "
       rabbitmqctl stop_app
       rabbitmqctl reset
       rabbitmqctl join_cluster rabbit@rabbitmq-serveur1
       rabbitmqctl start_app
   "
   ```

3. V√©rifier la synchronisation

**Temps de r√©solution cible :** 45 minutes

---

## Annexe D : FAQ Manag√©riale

### üîê Questions S√©curit√©

**Q1 : Pourquoi TLS est-il obligatoire ?**

**R :** TLS chiffre toutes les communications, garantissant :
- **Confidentialit√©** : Personne ne peut lire les messages transitant sur le r√©seau
- **Authenticit√©** : V√©rification de l'identit√© des serveurs et applications
- **Int√©grit√©** : Protection contre la modification des donn√©es en transit
- **Conformit√©** : Respect RGPD, ISO 27001, PCI-DSS

Sans TLS, un attaquant pourrait :
- ‚ùå Intercepter les messages (attaque "man-in-the-middle")
- ‚ùå Modifier les donn√©es
- ‚ùå Se faire passer pour une application l√©gitime

---

**Q2 : Que se passe-t-il si un certificat est vol√© ?**

**R :** Actions imm√©diates :
1. **R√©voquer** le certificat compromis
2. **R√©g√©n√©rer** un nouveau certificat
3. **Auditer** les connexions suspectes dans les logs
4. **Notifier** l'√©quipe s√©curit√©

Le certificat CA (autorit√©) doit √™tre prot√©g√© comme un secret d'entreprise critique.

---

**Q3 : √Ä quelle fr√©quence renouveler les certificats ?**

**R :** 
- **Certificats serveurs** : Tous les 1-2 ans (cr√©√©s pour 2 ans)
- **Certificats clients** : Tous les 6-12 mois (cr√©√©s pour 1 an)
- **Certificat CA** : Tous les 5-10 ans (cr√©√© pour 10 ans)

**Bonne pratique** : Renouveler 1 mois AVANT l'expiration pour √©viter les interruptions.

---

### üìä Questions Performance

**Q4 : Combien de connexions le cluster peut-il g√©rer ?**

**R :** Avec la configuration actuelle (3 serveurs de 16GB RAM) :
- **Connexions simultan√©es** : ~15,000-20,000 (5,000-7,000 par serveur)
- **Messages/seconde** : ~50,000-100,000 (d√©pend de la taille des messages)

Pour augmenter :
- Ajouter des serveurs au cluster
- Augmenter la RAM (64GB recommand√© pour haute charge)

---

**Q5 : Quel est l'impact de TLS sur les performances ?**

**R :** Impact minimal avec mat√©riel moderne :
- **Latence ajout√©e** : +1-2ms par message (n√©gligeable)
- **CPU** : +10-15% d'utilisation (pour chiffrement/d√©chiffrement)
- **M√©moire** : +5-10% (buffers SSL)

Le gain en s√©curit√© compense largement ce l√©ger surco√ªt.

---

### üí∞ Questions Co√ªts

**Q6 : Quel est le co√ªt total de possession (TCO) ?**

**R :** Co√ªts annuels estim√©s (infrastructure moyenne) :

| Poste | Co√ªt annuel |
|-------|-------------|
| **Serveurs** (3x VM 4 CPU, 16GB RAM) | 15,000 ‚Ç¨ |
| **Stockage** (SSD 500GB x3) | 3,000 ‚Ç¨ |
| **Licences** (RabbitMQ Open Source) | 0 ‚Ç¨ |
| **Support** (optionnel, entreprise) | 10,000 ‚Ç¨ |
| **Personnel** (maintenance, 20% ETP) | 20,000 ‚Ç¨ |
| **Total** | **~48,000 ‚Ç¨** |

**Alternatives payantes :**
- Amazon MQ (AWS) : ~60,000-80,000 ‚Ç¨/an
- Azure Service Bus : ~50,000-70,000 ‚Ç¨/an
- CloudAMQP : ~40,000-60,000 ‚Ç¨/an

**‚úÖ Auto-h√©berg√© = √©conomies + contr√¥le total**

---

**Q7 : Quels sont les co√ªts cach√©s ?**

**R :** √Ä pr√©voir :
- Formation √©quipes (une fois) : 5,000 ‚Ç¨
- Outils monitoring (Grafana, Prometheus) : 2,000 ‚Ç¨/an
- Backup/DR (stockage S3) : 1,000 ‚Ç¨/an
- Renouvellement certificats (automatis√©) : 0 ‚Ç¨
- Audits s√©curit√© annuels : 3,000 ‚Ç¨/an

**Total co√ªts additionnels** : ~11,000 ‚Ç¨ premi√®re ann√©e, puis ~6,000 ‚Ç¨/an

---

### üéØ Questions Business

**Q8 : Quelle est la disponibilit√© garantie ?**

**R :** Avec 3 serveurs en cluster :
- **SLA th√©orique** : 99.9% (8h downtime/an max)
- **SLA r√©el observ√©** : 99.95% (4h downtime/an)

Un seul serveur peut tomber sans impact. Pour 99.99% (52min/an), passer √† 5 serveurs.

---

**Q9 : Combien de temps pour une mise en production ?**

**R :** Timeline r√©aliste :

| Phase | Dur√©e | Responsable |
|-------|-------|-------------|
| Infrastructure (serveurs, r√©seau) | 1 semaine | Ops |
| Cr√©ation certificats PKI | 2 jours | S√©curit√© |
| Installation RabbitMQ | 3 jours | Ops |
| Configuration TLS | 2 jours | Ops |
| Tests & validation | 5 jours | Ops + Dev |
| Formation d√©veloppeurs | 2 jours | Ops |
| Migration applications | 2 semaines | Dev |
| **TOTAL** | **4-5 semaines** | |

**Facteurs d'acc√©l√©ration :**
- Scripts d'automatisation (fournis)
- √âquipe d√©di√©e full-time
- Environnement de test disponible

---

**Q10 : Quels sont les risques principaux ?**

**R :** Matrice de risques :

| Risque | Probabilit√© | Impact | Mitigation |
|--------|-------------|--------|------------|
| **Panne mat√©rielle** | Moyenne | Faible | Cluster HA (3 serveurs) |
| **Certificat expir√©** | Faible | √âlev√© | Monitoring + alertes |
| **Saturation m√©moire** | Moyenne | Moyen | Alarmes + auto-scaling |
| **Faille s√©curit√©** | Faible | √âlev√© | TLS + audits r√©guliers |
| **Split-brain** | Faible | Moyen | D√©tection automatique |
| **Erreur humaine** | Moyenne | Moyen | Scripts + documentation |

**Plan de continuit√©** : Backup quotidien + proc√©dure DR test√©e

---

## Annexe E : Checklist de Mise en Production (Format Manag√©rial)

### Phase 1 : Pr√©paration (Semaine 1-2)

**Infrastructure**
- [ ] 3 serveurs provisionn√©s (4 CPU, 16GB RAM, 500GB SSD)
- [ ] R√©seau configur√© (VLAN priv√©)
- [ ] DNS configur√© (rabbitmq-serveur1/2/3.entreprise.local)
- [ ] Firewall rules approuv√©es
- [ ] Budget valid√©

**√âquipe**
- [ ] Chef de projet d√©sign√©
- [ ] Ops assign√©s (2 personnes, 50% temps)
- [ ] S√©curit√© impliqu√©e (certificats)
- [ ] D√©veloppeurs inform√©s (2 jours formation pr√©vus)

**Documentation**
- [ ] Architecture valid√©e par le CTO
- [ ] Plan de migration approuv√©
- [ ] Proc√©dures DR document√©es
- [ ] Runbook op√©rationnel cr√©√©

---

### Phase 2 : Impl√©mentation (Semaine 3-4)

**S√©curit√© TLS**
- [ ] Autorit√© de certification (CA) cr√©√©e
- [ ] Certificats serveurs g√©n√©r√©s (3x)
- [ ] Certificats clients g√©n√©r√©s (par application)
- [ ] Cl√© CA sauvegard√©e en coffre-fort
- [ ] Politique de rotation d√©finie (6 mois)

**Installation**
- [ ] RabbitMQ install√© sur 3 serveurs
- [ ] Configuration TLS clients appliqu√©e
- [ ] Configuration TLS inter-serveurs appliqu√©e
- [ ] Cluster form√© et v√©rifi√©
- [ ] Haute disponibilit√© configur√©e

**Tests**
- [ ] Connexion TLS valid√©e (OpenSSL)
- [ ] Connexion Python test√©e
- [ ] Failover test√© (arr√™t 1 serveur)
- [ ] Performance test√©e (load test)
- [ ] S√©curit√© audit√©e (scan vuln√©rabilit√©s)

---

### Phase 3 : Monitoring & Backup (Semaine 4)

**Surveillance**
- [ ] Prometheus configur√©
- [ ] Grafana dashboards cr√©√©s
- [ ] Alertes email configur√©es
- [ ] Script v√©rification automatique (cron)
- [ ] Astreinte d√©finie

**Sauvegarde**
- [ ] Script backup automatis√©
- [ ] Stockage distant configur√© (S3)
- [ ] R√©tention d√©finie (30 jours)
- [ ] Restore test√© en environnement de test
- [ ] RTO/RPO valid√©s (2h/1h)

---

### Phase 4 : Formation & Migration (Semaine 5-6)

**Formation D√©veloppeurs**
- [ ] Session formation TLS (2h)
- [ ] Exemples code Python distribu√©s
- [ ] Certificats clients distribu√©s
- [ ] Support technique dispo (hotline)
- [ ] FAQ publi√©e

**Migration Applications**
- [ ] Planning migration valid√©
- [ ] Applications non-critiques migr√©es (pilote)
- [ ] Applications critiques migr√©es (progressif)
- [ ] Tests post-migration OK
- [ ] Ancien syst√®me d√©commissionn√©

---

### Phase 5 : Go-Live (Semaine 7)

**Production**
- [ ] Mise en production valid√©e (comit√©)
- [ ] Monitoring actif 24/7
- [ ] √âquipe support en astreinte
- [ ] Communication interne (succ√®s)
- [ ] R√©trospective planifi√©e (J+30)

**Post-Production**
- [ ] Revue incidents (J+7)
- [ ] Optimisation performance (J+30)
- [ ] Audit s√©curit√© (J+60)
- [ ] Documentation mise √† jour
- [ ] Le√ßons apprises partag√©es

---

## Annexe F : KPI de Suivi (Dashboard Manag√©rial)

### KPI Techniques (Hebdomadaire)

| Indicateur | Cible | Seuil Alerte | Mesure |
|------------|-------|--------------|--------|
| **Disponibilit√© cluster** | 99.9% | < 99.5% | Uptime monitoring |
| **Temps de r√©ponse moyen** | < 50ms | > 100ms | Application logs |
| **Messages/seconde** | 10,000+ | < 5,000 | RabbitMQ metrics |
| **Utilisation m√©moire** | < 70% | > 85% | Server monitoring |
| **Files satur√©es** | 0 | > 3 | RabbitMQ admin |
| **Connexions non-TLS** | 0 | > 0 | Security audit |

---

### KPI S√©curit√© (Mensuel)

| Indicateur | Cible | Status |
|------------|-------|--------|
| **Certificats expir√©s** | 0 | üü¢ Monitoring actif |
| **Tentatives connexion refus√©es** | < 100/jour | üü¢ Logs analys√©s |
| **Audits s√©curit√©** | Trimestriel | üü¢ Prochain: D√©c 2025 |
| **Vuln√©rabilit√©s critiques** | 0 | üü¢ Scan automatique |
| **Incidents s√©curit√©** | 0 | üü¢ Aucun √† date |

---

### KPI Business (Trimestriel)

| Indicateur | Q1 | Q2 | Q3 | Q4 | Tendance |
|------------|----|----|----|----|----------|
| **Co√ªt total** | 12k‚Ç¨ | 11k‚Ç¨ | 11k‚Ç¨ | 14k‚Ç¨ | ‚¨áÔ∏è Stable |
| **Incidents majeurs** | 0 | 1 | 0 | 0 | üü¢ Excellent |
| **Temps downtime** | 30min | 2h | 15min | 0 | üü¢ S'am√©liore |
| **Applications migr√©es** | 5 | 12 | 20 | 25 | ‚¨ÜÔ∏è Objectif atteint |
| **Satisfaction dev** | 8/10 | 8.5/10 | 9/10 | 9/10 | ‚¨ÜÔ∏è Tr√®s bon |

---

## Conclusion : B√©n√©fices de la Solution

### üîê S√©curit√© Renforc√©e
- ‚úÖ **100% des communications chiffr√©es** (TLS 1.2/1.3)
- ‚úÖ **Authentification mutuelle** (mTLS)
- ‚úÖ **Conformit√© r√©glementaire** (RGPD, ISO 27001)
- ‚úÖ **Audit trail complet**

### üöÄ Haute Disponibilit√©
- ‚úÖ **99.9% uptime** garanti
- ‚úÖ **Pas de point unique de d√©faillance**
- ‚úÖ **Failover automatique** (< 5 secondes)
- ‚úÖ **Donn√©es r√©pliqu√©es** sur 3 serveurs

### üí∞ Ma√Ætrise des Co√ªts
- ‚úÖ **TCO optimis√©** (~50k‚Ç¨/an vs 70k‚Ç¨+ cloud)
- ‚úÖ **Open source** (pas de licence)
- ‚úÖ **√âvolutif** (ajouter serveurs facilement)
- ‚úÖ **Ind√©pendance** (pas de vendor lock-in)

### ‚ö° Performance
- ‚úÖ **50,000+ messages/sec** (capacit√©)
- ‚úÖ **Latence < 50ms** (moyenne)
- ‚úÖ **20,000 connexions** simultan√©es
- ‚úÖ **Impact TLS minimal** (+2ms)

### üõ†Ô∏è Op√©rabilit√©
- ‚úÖ **Scripts automatis√©s** (d√©ploiement, backup)
- ‚úÖ **Monitoring complet** (Prometheus/Grafana)
- ‚úÖ **Documentation claire** (pour tous niveaux)
- ‚úÖ **Support interne** (√©quipe form√©e)

---

## Prochaines √âtapes (Roadmap)

### Court terme (0-3 mois)
1. **Optimisation** : Tuning performances apr√®s donn√©es production
2. **Monitoring avanc√©** : Ajout m√©triques business
3. **Formation avanc√©e** : Session d√©veloppeurs experts

### Moyen terme (3-6 mois)
1. **Multi-datacenter** : R√©plication g√©ographique (DR)
2. **Auto-scaling** : Ajout automatique de n≈ìuds selon charge
3. **API Gateway** : Int√©gration avec Kong/Apigee

### Long terme (6-12 mois)
1. **Migration cloud hybride** : Option Azure/AWS si besoin
2. **Machine Learning** : Pr√©diction des pics de charge
3. **Zero-trust** : Int√©gration avec solution IAM entreprise

---

## üìû Contacts & Support

### √âquipe Projet
- **Chef de projet** : [nom]@entreprise.com
- **Tech Lead Infrastructure** : ops@entreprise.com
- **Responsable S√©curit√©** : security@entreprise.com

### Support Technique
- **Niveau 1** (24/7) : +33 X XX XX XX XX
- **Niveau 2** (heures bureau) : support-rabbitmq@entreprise.com
- **Niveau 3** (escalade) : cto@entreprise.com

### Documentation
- **Wiki interne** : https://wiki.entreprise.com/rabbitmq
- **Runbook** : https://docs.entreprise.com/rabbitmq/ops
- **Code source** : https://git.entreprise.com/infra/rabbitmq

---

## üìö Ressources Externes

### Documentation Officielle
- **RabbitMQ TLS** : https://www.rabbitmq.com/ssl.html
- **RabbitMQ Clustering** : https://www.rabbitmq.com/clustering.html
- **Pika (Python)** : https://pika.readthedocs.io/

### Formation & Certification
- **RabbitMQ Academy** : https://academy.rabbitmq.com
- **Linux Foundation** : https://training.linuxfoundation.org

### Communaut√©
- **Forum RabbitMQ** : https://groups.google.com/forum/#!forum/rabbitmq-users
- **Stack Overflow** : Tag `rabbitmq` + `ssl`
- **GitHub Issues** : https://github.com/rabbitmq/rabbitmq-server/issues

---

**üìÑ Version du Document** : 2.0  
**üìÖ Date** : Octobre 2025  
**‚úçÔ∏è R√©dacteur** : √âquipe Infrastructure  
**‚úÖ Valid√© par** : CTO + RSSI  
**üîÑ Prochaine r√©vision** : Janvier 2026

---

## üéì Glossaire pour Non-Techniciens

**AMQP** : Protocole de messagerie (langage de communication entre applications)

**CA (Certificate Authority)** : Autorit√© qui √©met les certificats, comme un notaire num√©rique

**Certificat** : Document √©lectronique prouvant l'identit√© (comme une carte d'identit√©)

**Chiffrement** : Transformation des donn√©es en code secret

**Cluster** : Groupe de serveurs travaillant ensemble

**Failover** : Bascule automatique vers un serveur de secours

**Haute disponibilit√© (HA)** : Syst√®me qui fonctionne presque tout le temps (99.9%+)

**Heartbeat** : Signal r√©gulier prouvant qu'un syst√®me est vivant

**mTLS** : Authentification mutuelle (les 2 parties prouvent leur identit√©)

**Queue (file d'attente)** : Zone de stockage temporaire des messages

**Split-brain** : Situation o√π des serveurs ne communiquent plus entre eux

**SSL/TLS** : Technologies de s√©curisation des communications Internet

**TCO** : Total Cost of Ownership (co√ªt total de possession)

**Uptime** : Temps pendant lequel le syst√®me est disponible

---

**FIN DU DOCUMENT**

Pour toute question, contactez : infrastructure@entreprise.com# Guide RabbitMQ Cluster Hautement Disponible avec S√©curit√© TLS

## Vue d'Ensemble Ex√©cutive

Ce document d√©crit la mise en place d'un syst√®me de messagerie RabbitMQ **s√©curis√©** et **hautement disponible** pour l'entreprise. La solution garantit :

- ‚úÖ **S√©curit√© maximale** : Toutes les communications sont chiffr√©es (TLS/SSL)
- ‚úÖ **Haute disponibilit√©** : Le syst√®me continue de fonctionner m√™me si un serveur tombe
- ‚úÖ **Conformit√©** : Respect des standards de s√©curit√© informatique

### Qu'est-ce que TLS/SSL ?

**TLS (Transport Layer Security)** est comme un tunnel s√©curis√© pour les donn√©es. Imaginez :
- üîí Une conversation t√©l√©phonique chiffr√©e que personne ne peut √©couter
- üÜî Des papiers d'identit√© num√©riques (certificats) pour v√©rifier l'identit√© de chacun
- üõ°Ô∏è Une protection contre les pirates informatiques

---

## Architecture Simplifi√©e

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ     APPLICATIONS (Python, Java, etc)    ‚îÇ
‚îÇ         avec certificats clients        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
               ‚îÇ Connexions TLS chiffr√©es
               ‚îÇ
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÇ                     ‚îÇ              ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇServeur1‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫‚îÇServeur2 ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇServeur3 ‚îÇ
‚îÇRabbitMQ‚îÇ   TLS    ‚îÇRabbitMQ ‚îÇTLS ‚îÇRabbitMQ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    Communications inter-serveurs chiffr√©es
```

**3 serveurs RabbitMQ** travaillent ensemble :
- Si un serveur tombe, les 2 autres continuent
- Les donn√©es sont r√©pliqu√©es automatiquement
- Toutes les communications sont chiffr√©es

---

## Partie 1 : Cr√©ation des Certificats de S√©curit√©

### Comprendre les Certificats

Pensez aux certificats comme des **cartes d'identit√© num√©riques** :

1. **Autorit√© de Certification (CA)** = Le gouvernement qui √©met les cartes d'identit√©
2. **Certificat Serveur** = Carte d'identit√© de chaque serveur RabbitMQ
3. **Certificat Client** = Carte d'identit√© de chaque application

### √âtape 1 : Cr√©er l'Autorit√© de Certification (CA)

**Pourquoi ?** C'est l'autorit√© qui va "signer" tous les autres certificats pour garantir leur authenticit√©.

```bash
# Cr√©er le dossier pour stocker les certificats
mkdir -p /opt/rabbitmq-securite/autorite-certification
cd /opt/rabbitmq-securite/autorite-certification

# Cr√©er la cl√© priv√©e de l'autorit√© (mot de passe requis)
openssl genrsa -aes256 -out cle-ca.pem 4096

# Cr√©er le certificat de l'autorit√© (valable 10 ans)
openssl req -new -x509 -days 3650 -key cle-ca.pem -out certificat-ca.pem \
  -subj "/C=FR/ST=Ile-de-France/L=Paris/O=VotreEntreprise/CN=Autorite RabbitMQ"
```

**‚ö†Ô∏è IMPORTANT** : Sauvegardez `cle-ca.pem` dans un coffre-fort s√©curis√©. C'est la cl√© ma√Ætresse !

---

### √âtape 2 : Cr√©er les Certificats pour les Serveurs RabbitMQ

**Pourquoi ?** Chaque serveur a besoin de prouver son identit√©.

```bash
# Cr√©er le dossier pour les certificats serveurs
mkdir -p /opt/rabbitmq-securite/serveurs
cd /opt/rabbitmq-securite/serveurs

# Pour chaque serveur (r√©p√©ter pour serveur1, serveur2, serveur3)
SERVEUR="serveur1"

# 1. Cr√©er la cl√© priv√©e du serveur
openssl genrsa -out ${SERVEUR}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${SERVEUR}-cle.pem -out ${SERVEUR}-demande.csr \
  -subj "/C=FR/ST=Ile-de-France/O=VotreEntreprise/CN=rabbitmq-${SERVEUR}.entreprise.local"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${SERVEUR}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${SERVEUR}-certificat.pem \
  -days 730 -sha384

# 4. Cr√©er le "bundle" (certificat + autorit√© CA)
cat ${SERVEUR}-certificat.pem ../autorite-certification/certificat-ca.pem > \
    ${SERVEUR}-bundle.pem
```

**R√©p√©tez cette op√©ration pour serveur2 et serveur3.**

---

### √âtape 3 : Cr√©er les Certificats pour les Applications Clientes

**Pourquoi ?** Pour que seules les applications autoris√©es puissent se connecter.

```bash
# Cr√©er le dossier pour les certificats clients
mkdir -p /opt/rabbitmq-securite/clients
cd /opt/rabbitmq-securite/clients

# Pour chaque application (exemple: app-production)
APPLICATION="app-production"

# 1. Cr√©er la cl√© priv√©e du client
openssl genrsa -out ${APPLICATION}-cle.pem 4096

# 2. Cr√©er une demande de certificat
openssl req -new -key ${APPLICATION}-cle.pem -out ${APPLICATION}-demande.csr \
  -subj "/C=FR/O=VotreEntreprise/CN=${APPLICATION}"

# 3. Signer le certificat avec l'autorit√© CA
openssl x509 -req -in ${APPLICATION}-demande.csr \
  -CA ../autorite-certification/certificat-ca.pem \
  -CAkey ../autorite-certification/cle-ca.pem \
  -CAcreateserial -out ${APPLICATION}-certificat.pem \
  -days 365 -sha384
```

**R√©sum√© des fichiers cr√©√©s :**
- `certificat-ca.pem` : L'autorit√© de certification (√† distribuer partout)
- `serveurX-bundle.pem` : Certificat de chaque serveur
- `serveurX-cle.pem` : Cl√© priv√©e de chaque serveur (SECRET)
- `app-production-certificat.pem` : Certificat de l'application
- `app-production-cle.pem` : Cl√© priv√©e de l'application (SECRET)

---

## Partie 2 : Configuration TLS des Serveurs RabbitMQ

### √âtape 1 : Installer les Certificats sur Chaque Serveur

```bash
# Sur chaque serveur (serveur1, serveur2, serveur3)
# Se connecter en SSH au serveur

# Cr√©er le dossier s√©curis√©
sudo mkdir -p /etc/rabbitmq/certificats
sudo chown rabbitmq:rabbitmq /etc/rabbitmq/certificats
sudo chmod 700 /etc/rabbitmq/certificats

# Copier les fichiers depuis votre poste
# (Adapter "serveur1" selon le serveur)
scp certificat-ca.pem serveur1:/etc/rabbitmq/certificats/ca.pem
scp serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem
scp serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem

# S√©curiser les permissions
sudo chmod 600 /etc/rabbitmq/certificats/serveur-cle.pem
sudo chmod 644 /etc/rabbitmq/certificats/serveur.pem
sudo chmod 644 /etc/rabbitmq/certificats/ca.pem
```

---

### √âtape 2 : Configuration TLS pour les Connexions Clients

**Fichier : `/etc/rabbitmq/rabbitmq.conf`**

```conf
# ============================================================================
# CONFIGURATION TLS RABBITMQ - CONNEXIONS CLIENTS
# ============================================================================

# D√©sactiver les connexions non-s√©curis√©es (sans TLS)
listeners.tcp = none

# Activer uniquement les connexions TLS s√©curis√©es
listeners.ssl.default = 5671

# --- CHEMINS DES CERTIFICATS ---
# Certificat de l'autorit√© (CA) pour v√©rifier les clients
ssl_options.cacertfile = /etc/rabbitmq/certificats/ca.pem

# Certificat de ce serveur
ssl_options.certfile = /etc/rabbitmq/certificats/serveur.pem

# Cl√© priv√©e de ce serveur (SECRET)
ssl_options.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- S√âCURIT√â RENFORC√âE ---
# V√©rifier OBLIGATOIREMENT l'identit√© du client
ssl_options.verify = verify_peer
ssl_options.fail_if_no_peer_cert = true

# Profondeur de v√©rification de la cha√Æne de certificats
ssl_options.depth = 2

# --- PROTOCOLES TLS AUTORIS√âS ---
# Utiliser uniquement TLS 1.2 et TLS 1.3 (les plus s√©curis√©s)
ssl_options.versions.1 = tlsv1.3
ssl_options.versions.2 = tlsv1.2

# --- ALGORITHMES DE CHIFFREMENT ---
# Utiliser uniquement les algorithmes modernes et s√©curis√©s
ssl_options.ciphers.1 = TLS_AES_256_GCM_SHA384
ssl_options.ciphers.2 = TLS_AES_128_GCM_SHA256
ssl_options.ciphers.3 = ECDHE-RSA-AES256-GCM-SHA384
ssl_options.ciphers.4 = ECDHE-RSA-AES128-GCM-SHA256

# Pr√©f√©rer l'ordre des algorithmes du serveur
ssl_options.honor_cipher_order = true

# --- INTERFACE D'ADMINISTRATION (HTTPS) ---
# D√©sactiver HTTP non-s√©curis√©
management.tcp.port = none

# Activer HTTPS pour l'administration
management.ssl.port = 15671
management.ssl.cacertfile = /etc/rabbitmq/certificats/ca.pem
management.ssl.certfile = /etc/rabbitmq/certificats/serveur.pem
management.ssl.keyfile = /etc/rabbitmq/certificats/serveur-cle.pem

# --- CONFIGURATION CLUSTER ---
cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config
cluster_formation.classic_config.nodes.1 = rabbit@rabbitmq-serveur1
cluster_formation.classic_config.nodes.2 = rabbit@rabbitmq-serveur2
cluster_formation.classic_config.nodes.3 = rabbit@rabbitmq-serveur3

# Heartbeat entre les n≈ìuds (10 secondes)
cluster_keepalive_interval = 10000

# --- HAUTE DISPONIBILIT√â ---
# Les files d'attente "quorum" sont r√©pliqu√©es sur les 3 serveurs
# M√©moire et disque
vm_memory_high_watermark.relative = 0.6
disk_free_limit.absolute = 5GB

# Timeout des connexions
heartbeat = 60
```

**üí° Explication simplifi√©e :**
- ‚úÖ Seules les connexions chiffr√©es TLS sont accept√©es
- ‚úÖ Les clients DOIVENT pr√©senter un certificat valide
- ‚úÖ Les protocoles anciens et non-s√©curis√©s sont d√©sactiv√©s
- ‚úÖ L'interface web d'administration est aussi s√©curis√©e (HTTPS)

---

### √âtape 3 : Configuration TLS pour les Communications Entre Serveurs

**Pourquoi ?** Les 3 serveurs RabbitMQ doivent aussi communiquer de fa√ßon s√©curis√©e entre eux.

**Fichier : `/etc/rabbitmq/inter-serveurs-tls.config`**

```erlang
%% ============================================================================
%% CONFIGURATION TLS POUR COMMUNICATIONS INTER-SERVEURS
%% ============================================================================

[
  {kernel, [
    {inet_dist_use_interface, {0,0,0,0}},
    {inet_dist_listen_min, 25672},
    {inet_dist_listen_max, 25672}
  ]},
  
  {rabbit, [
    {ssl_dist_opt, [
      %% Configuration SERVEUR (pour recevoir les connexions)
      {server, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        %% V√©rifier l'identit√© de l'autre serveur
        {verify, verify_peer},
        {fail_if_no_peer_cert, true},
        
        %% Utiliser TLS 1.2 et 1.3
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        %% Algorithmes de chiffrement s√©curis√©s
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384",
          "ECDHE-RSA-AES128-GCM-SHA256"
        ]}
      ]},
      
      %% Configuration CLIENT (pour initier les connexions)
      {client, [
        {cacertfile, "/etc/rabbitmq/certificats/ca.pem"},
        {certfile,   "/etc/rabbitmq/certificats/serveur.pem"},
        {keyfile,    "/etc/rabbitmq/certificats/serveur-cle.pem"},
        
        {verify, verify_peer},
        {versions, ['tlsv1.3', 'tlsv1.2']},
        
        {ciphers, [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "ECDHE-RSA-AES256-GCM-SHA384"
        ]}
      ]}
    ]}
  ]}
].
```

**üí° Point cl√© :** Cette configuration active TLS pour les communications "cach√©es" entre serveurs (le c≈ìur du cluster).

---

### √âtape 4 : Configuration Environnement Erlang

**Fichier : `/etc/rabbitmq/rabbitmq-env.conf`**

```bash
# ============================================================================
# CONFIGURATION ENVIRONNEMENT RABBITMQ
# ============================================================================

# Nom du n≈ìud (ADAPTER selon le serveur: serveur1, serveur2, serveur3)
NODENAME=rabbit@rabbitmq-serveur1

# Cookie partag√© entre TOUS les serveurs (doit √™tre identique)
# G√©n√©rer avec: openssl rand -base64 32
HOME=/var/lib/rabbitmq

# ACTIVER TLS pour les communications inter-serveurs
SERVER_ADDITIONAL_ERL_ARGS="-proto_dist inet_tls -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config"
```

**‚ö†Ô∏è CRITIQUE** : Le cookie Erlang doit √™tre **identique** sur les 3 serveurs !

```bash
# Sur TOUS les serveurs, cr√©er le m√™me cookie
echo "VOTRE_COOKIE_SECRET_ICI" > /var/lib/rabbitmq/.erlang.cookie
chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
chmod 400 /var/lib/rabbitmq/.erlang.cookie
```

---

### √âtape 5 : Configuration CLI Tools avec TLS

**‚ö†Ô∏è IMPORTANT** : Lorsque TLS est activ√© pour la communication inter-serveurs, les commandes CLI (`rabbitmqctl`, `rabbitmq-diagnostics`) doivent aussi utiliser TLS.

**Configuration des outils CLI :**

```bash
# Cr√©er le fichier de configuration pour les outils CLI
cat > /root/.erlang.cookie <<EOF
VOTRE_COOKIE_SECRET_ICI
EOF
chmod 400 /root/.erlang.cookie

# Cr√©er un script wrapper pour rabbitmqctl avec TLS
cat > /usr/local/bin/rabbitmqctl-tls <<'SCRIPT'
#!/bin/bash
# Wrapper rabbitmqctl avec support TLS

export ERL_FLAGS="-proto_dist inet_tls \
  -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config \
  -setcookie $(cat /var/lib/rabbitmq/.erlang.cookie)"

/usr/sbin/rabbitmqctl "$@"
SCRIPT

chmod +x /usr/local/bin/rabbitmqctl-tls

# Faire de m√™me pour rabbitmq-diagnostics
cat > /usr/local/bin/rabbitmq-diagnostics-tls <<'SCRIPT'
#!/bin/bash
export ERL_FLAGS="-proto_dist inet_tls \
  -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config \
  -setcookie $(cat /var/lib/rabbitmq/.erlang.cookie)"

/usr/sbin/rabbitmq-diagnostics "$@"
SCRIPT

chmod +x /usr/local/bin/rabbitmq-diagnostics-tls

# Cr√©er des alias pour faciliter l'utilisation
cat >> /root/.bashrc <<'EOF'
# RabbitMQ CLI avec TLS
alias rabbitmqctl='rabbitmqctl-tls'
alias rabbitmq-diagnostics='rabbitmq-diagnostics-tls'
EOF

source /root/.bashrc
```

**üí° Explication :** 
- Les commandes CLI sont des clients Erlang qui se connectent au n≈ìud RabbitMQ
- Avec TLS inter-serveurs activ√©, elles doivent aussi utiliser TLS
- Le wrapper configure automatiquement les param√®tres TLS

**Alternative : Utilisation directe avec variables d'environnement**

```bash
# √Ä chaque commande, pr√©fixer avec :
ERL_FLAGS="-proto_dist inet_tls -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config" \
rabbitmqctl cluster_status

# Ou exporter globalement :
export ERL_FLAGS="-proto_dist inet_tls -ssl_dist_optfile /etc/rabbitmq/inter-serveurs-tls.config"
rabbitmqctl cluster_status
rabbitmqctl list_users
```

---

### √âtape 6 : Configuration du Pare-feu

**Pourquoi ?** Autoriser uniquement les ports n√©cessaires et s√©curis√©s.

```bash
# Sur chaque serveur

# Ports √† ouvrir:
# - 5671 : Connexions clients TLS
# - 15671 : Interface web HTTPS
# - 25672 : Communication inter-serveurs TLS
# - 4369 : Service Erlang (epmd)
# - 35672-35682 : CLI tools TLS (communication avec n≈ìud local)

firewall-cmd --permanent --add-port=5671/tcp        # AMQP TLS
firewall-cmd --permanent --add-port=15671/tcp       # Management HTTPS
firewall-cmd --permanent --add-port=25672/tcp       # Cluster TLS
firewall-cmd --permanent --add-port=4369/tcp        # Erlang EPMD
firewall-cmd --permanent --add-port=35672-35682/tcp # CLI Tools
firewall-cmd --reload
```

---

## Partie 3 : Formation du Cluster

### √âtape 1 : D√©marrer le Premier Serveur

```bash
# Sur serveur1
systemctl start rabbitmq-server
systemctl enable rabbitmq-server

# Activer le plugin d'administration web
rabbitmq-plugins enable rabbitmq_management

# Cr√©er un utilisateur administrateur
rabbitmqctl add_user admin MotDePasseSecurise123!
rabbitmqctl set_user_tags admin administrator
rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"

# V√©rifier que TLS fonctionne
rabbitmq-diagnostics listeners
# Vous devez voir: Port 5671 (ssl)
```

---

### √âtape 2 : Ajouter les Autres Serveurs au Cluster

```bash
# Sur serveur2
systemctl start rabbitmq-server

# Arr√™ter l'application RabbitMQ (pas le syst√®me)
rabbitmqctl stop_app

# Rejoindre le cluster
rabbitmqctl join_cluster rabbit@rabbitmq-serveur1

# Red√©marrer l'application
rabbitmqctl start_app

# V√©rifier
rabbitmqctl cluster_status
```

**R√©p√©ter sur serveur3.**

---

### √âtape 3 : Configurer la Haute Disponibilit√©

```bash
# Sur n'importe quel serveur du cluster
# Cr√©er une politique pour que les files soient r√©pliqu√©es sur les 3 serveurs

rabbitmqctl set_policy ha-all ".*" \
  '{"ha-mode":"all","ha-sync-mode":"automatic"}' \
  --priority 1 \
  --apply-to queues
```

**üí° R√©sultat :** Toutes les files d'attente seront automatiquement r√©pliqu√©es sur les 3 serveurs.

---

## Partie 4 : Tester la Connexion S√©curis√©e

### Test 1 : V√©rifier les Certificats

```bash
# Tester la connexion TLS au serveur
openssl s_client -connect rabbitmq-serveur1.entreprise.local:5671 \
  -cert /opt/rabbitmq-securite/clients/app-production-certificat.pem \
  -key /opt/rabbitmq-securite/clients/app-production-cle.pem \
  -CAfile /opt/rabbitmq-securite/autorite-certification/certificat-ca.pem

# Si succ√®s, vous verrez:
# Verify return code: 0 (ok)
```

---

### Test 2 : Connexion depuis Python

**Installation de la biblioth√®que Python :**

```bash
pip install pika
```

**Code Python de test :**

```python
import pika
import ssl

# ============================================================================
# CONFIGURATION TLS POUR PYTHON
# ============================================================================

# 1. Cr√©er le contexte SSL/TLS
contexte_ssl = ssl.create_default_context(
    cafile="/chemin/vers/certificat-ca.pem"
)

# 2. Charger le certificat et la cl√© de l'application
contexte_ssl.load_cert_chain(
    certfile="/chemin/vers/app-production-certificat.pem",
    keyfile="/chemin/vers/app-production-cle.pem"
)

# 3. V√©rifier le nom du serveur
contexte_ssl.check_hostname = True
contexte_ssl.verify_mode = ssl.CERT_REQUIRED

# 4. Configurer la connexion RabbitMQ
identifiants = pika.PlainCredentials('admin', 'MotDePasseSecurise123!')

parametres = pika.ConnectionParameters(
    host='rabbitmq-serveur1.entreprise.local',
    port=5671,
    virtual_host='/',
    credentials=identifiants,
    ssl_options=pika.SSLOptions(contexte_ssl),
    heartbeat=60,
    blocked_connection_timeout=300
)

# 5. Se connecter
try:
    connexion = pika.BlockingConnection(parametres)
    canal = connexion.channel()
    
    print("‚úÖ Connexion TLS r√©ussie !")
    
    # 6. Cr√©er une file d'attente
    canal.queue_declare(
        queue='test-securise',
        durable=True
    )
    
    # 7. Envoyer un message
    canal.basic_publish(
        exchange='',
        routing_key='test-securise',
        body='Message de test s√©curis√©',
        properties=pika.BasicProperties(
            delivery_mode=2,  # Message persistant
        )
    )
    
    print("‚úÖ Message envoy√© avec succ√®s !")
    
    connexion.close()
    
except Exception as e:
    print(f"‚ùå Erreur de connexion : {e}")
```

---

## Partie 5 : Surveillance et Maintenance

### Acc√©der √† l'Interface Web (HTTPS)

Ouvrez votre navigateur :
```
https://rabbitmq-serveur1.entreprise.local:15671
```

**‚ö†Ô∏è Note :** Votre navigateur affichera un avertissement car le certificat est auto-sign√©. C'est normal. Ajoutez une exception de s√©curit√©.

Connectez-vous avec l'utilisateur `admin` cr√©√© pr√©c√©demment.

---

### Commandes de Surveillance Importantes

```bash
# Voir l'√©tat du cluster
rabbitmqctl cluster_status

# Voir les connexions actives (avec TLS)
rabbitmqctl list_connections peer_host ssl ssl_protocol ssl_cipher

# Voir l'utilisation m√©moire
rabbitmqctl status | grep memory

# Voir les alarmes
rabbitmqctl list_alarms

# V√©rifier la sant√© du cluster
rabbitmqctl node_health_check
```

---

### Rotation des Certificats (Renouvellement)

**Les certificats expirent !** Voici la proc√©dure pour les renouveler :

**Tous les 6 mois minimum :**

1. **G√©n√©rer de nouveaux certificats** (m√™me processus que Partie 1)
2. **Pour chaque serveur, un par un :**
   ```bash
   # Copier les nouveaux certificats
   scp nouveau-serveur1-bundle.pem serveur1:/etc/rabbitmq/certificats/serveur.pem.new
   scp nouveau-serveur1-cle.pem serveur1:/etc/rabbitmq/certificats/serveur-cle.pem.new
   
   # Sur le serveur
   cd /etc/rabbitmq/certificats
   mv serveur.pem serveur.pem.old
   mv serveur-cle.pem serveur-cle.pem.old
   mv serveur.pem.new serveur.pem
   mv serveur-cle.pem.new serveur-cle.pem
   chmod 600 serveur-cle.pem
   
   # Red√©marrer RabbitMQ
   systemctl restart rabbitmq-server
   
   # Attendre 30 secondes
   sleep 30
   
   # V√©rifier
   rabbitmqctl node_health_check
   ```

3. **Distribuer les nouveaux certificats clients** aux √©quipes de d√©veloppement

---

## R√©sum√© des Fichiers Importants

### Sur le Poste d'Administration
```
/opt/rabbitmq-securite/
‚îú‚îÄ‚îÄ autorite-certification/
‚îÇ   ‚îú‚îÄ‚îÄ cle-ca.pem (‚ö†Ô∏è SECRET - Coffre-fort)
‚îÇ   ‚îî‚îÄ‚îÄ certificat-ca.pem (√Ä distribuer partout)
‚îú‚îÄ‚îÄ serveurs/
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur1-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-bundle.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur2-cle.pem (‚ö†Ô∏è SECRET)
‚îÇ   ‚îú‚îÄ‚îÄ serveur3-bundle.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur3-cle.pem (‚ö†Ô∏è SECRET)
‚îî‚îÄ‚îÄ clients/
    ‚îú‚îÄ‚îÄ app-production-certificat.pem
    ‚îî‚îÄ‚îÄ app-production-cle.pem (‚ö†Ô∏è SECRET)
```

### Sur Chaque Serveur RabbitMQ
```
/etc/rabbitmq/
‚îú‚îÄ‚îÄ certificats/
‚îÇ   ‚îú‚îÄ‚îÄ ca.pem
‚îÇ   ‚îú‚îÄ‚îÄ serveur.pem
‚îÇ   ‚îî‚îÄ‚îÄ serveur-cle.pem (‚ö†Ô∏è SECRET - chmod 600)
‚îú‚îÄ‚îÄ rabbitmq.conf
‚îú‚îÄ‚îÄ inter-serveurs-tls.config
‚îî‚îÄ‚îÄ rabbitmq-env.conf

/var/lib/rabbitmq/
‚îî‚îÄ‚îÄ .erlang.cookie (‚ö†Ô∏è SECRET - chmod 400)
```

---

## Checklist de Mise en Production

- [ ] **Certificats cr√©√©s** pour CA, serveurs et clients
- [ ] **Certificats install√©s** sur les 3 serveurs
- [ ] **Configuration TLS** appliqu√©e (rabbitmq.conf)
- [ ] **TLS inter-serveurs** configur√© (inter-serveurs-tls.config)
- [ ] **Cookie Erlang identique** sur les 3 serveurs
- [ ] **Pare-feu** configur√© (ports 5671, 15671, 25672, 4369)
- [ ] **Cluster form√©** (3 n≈ìuds actifs)
- [ ] **Haute disponibilit√©** configur√©e (politique ha-all)
- [ ] **Utilisateur admin** cr√©√©
- [ ] **Test connexion TLS** depuis Python r√©ussi
- [ ] **Interface web HTTPS** accessible
- [ ] **Documentation** partag√©e avec l'√©quipe
- [ ] **Proc√©dure de rotation** des certificats planifi√©e
- [ ] **Sauvegardes** automatis√©es en place
- [ ] **Surveillance** (monitoring) activ√©e

---

## Support et D√©pannage

### Probl√®me : "Verify return code: 20 (unable to get local issuer certificate)"
**Solution :** Le certificat CA n'est pas trouv√© ou le chemin est incorrect.
```bash
# V√©rifier que le fichier existe
ls -l /etc/rabbitmq/certificats/ca.pem

# V√©rifier les permissions
chmod 644 /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : "Connection refused"
**Solution :** Le pare-feu bloque la connexion.
```bash
# V√©rifier les ports ouverts
firewall-cmd --list-ports

# Tester la connectivit√©
telnet rabbitmq-serveur1.entreprise.local 5671
```

### Probl√®me : "Handshake failed"
**Solution :** Incompatibilit√© TLS ou certificat expir√©.
```bash
# V√©rifier la date d'expiration
openssl x509 -in /etc/rabbitmq/certificats/serveur.pem -noout -dates

# Tester la connexion TLS manuellement
openssl s_client -connect localhost:5671 -CAfile /etc/rabbitmq/certificats/ca.pem
```

### Probl√®me : Le cluster ne se forme pas
**Solution :** Cookie Erlang diff√©rent ou probl√®me r√©seau.
```bash
# V√©rifier que le cookie est identique sur tous les serveurs
md5sum /var/lib/rabbitmq/.erlang.cookie

# V√©rifier la connectivit√© inter-serveurs
ping rabbitmq-serveur2.entreprise.local
telnet rabbitmq-serveur2.entreprise.local 25672
```

---

## Contacts et Ressources

### Documentation Officielle RabbitMQ
- Guide TLS : https://www.rabbitmq.com/ssl.html
- Clustering : https://www.rabbitmq.com/clustering.html

### Support Interne
- √âquipe Infrastructure : infrastructure@entreprise.com
- √âquipe S√©curit√© : securite@entreprise.com

### Calendrier de Maintenance
- **Rotation certificats** : Tous les 6 mois
- **Mise √† jour RabbitMQ** : Trimestrielle
- **Backup** : Quotidien (automatique)
- **Revue s√©curit√©** : Annuelle

